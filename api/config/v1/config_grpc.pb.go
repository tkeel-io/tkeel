// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigClient interface {
	GetDeploymentConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeploymentConfigResponse, error)
	GetPlatformConfig(ctx context.Context, in *PlatformConfigRequest, opts ...grpc.CallOption) (*structpb.Value, error)
	DelPlatformConfig(ctx context.Context, in *PlatformConfigRequest, opts ...grpc.CallOption) (*structpb.Value, error)
	SetPlatformExtraConfig(ctx context.Context, in *SetPlatformExtraConfigRequest, opts ...grpc.CallOption) (*structpb.Value, error)
}

type configClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigClient(cc grpc.ClientConnInterface) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) GetDeploymentConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeploymentConfigResponse, error) {
	out := new(GetDeploymentConfigResponse)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.config.v1.Config/GetDeploymentConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetPlatformConfig(ctx context.Context, in *PlatformConfigRequest, opts ...grpc.CallOption) (*structpb.Value, error) {
	out := new(structpb.Value)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.config.v1.Config/GetPlatformConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DelPlatformConfig(ctx context.Context, in *PlatformConfigRequest, opts ...grpc.CallOption) (*structpb.Value, error) {
	out := new(structpb.Value)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.config.v1.Config/DelPlatformConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) SetPlatformExtraConfig(ctx context.Context, in *SetPlatformExtraConfigRequest, opts ...grpc.CallOption) (*structpb.Value, error) {
	out := new(structpb.Value)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.config.v1.Config/SetPlatformExtraConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
// All implementations must embed UnimplementedConfigServer
// for forward compatibility
type ConfigServer interface {
	GetDeploymentConfig(context.Context, *emptypb.Empty) (*GetDeploymentConfigResponse, error)
	GetPlatformConfig(context.Context, *PlatformConfigRequest) (*structpb.Value, error)
	DelPlatformConfig(context.Context, *PlatformConfigRequest) (*structpb.Value, error)
	SetPlatformExtraConfig(context.Context, *SetPlatformExtraConfigRequest) (*structpb.Value, error)
	mustEmbedUnimplementedConfigServer()
}

// UnimplementedConfigServer must be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (UnimplementedConfigServer) GetDeploymentConfig(context.Context, *emptypb.Empty) (*GetDeploymentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentConfig not implemented")
}
func (UnimplementedConfigServer) GetPlatformConfig(context.Context, *PlatformConfigRequest) (*structpb.Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformConfig not implemented")
}
func (UnimplementedConfigServer) DelPlatformConfig(context.Context, *PlatformConfigRequest) (*structpb.Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPlatformConfig not implemented")
}
func (UnimplementedConfigServer) SetPlatformExtraConfig(context.Context, *SetPlatformExtraConfigRequest) (*structpb.Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlatformExtraConfig not implemented")
}
func (UnimplementedConfigServer) mustEmbedUnimplementedConfigServer() {}

// UnsafeConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServer will
// result in compilation errors.
type UnsafeConfigServer interface {
	mustEmbedUnimplementedConfigServer()
}

func RegisterConfigServer(s grpc.ServiceRegistrar, srv ConfigServer) {
	s.RegisterService(&Config_ServiceDesc, srv)
}

func _Config_GetDeploymentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetDeploymentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.config.v1.Config/GetDeploymentConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetDeploymentConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetPlatformConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatformConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetPlatformConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.config.v1.Config/GetPlatformConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetPlatformConfig(ctx, req.(*PlatformConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DelPlatformConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatformConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DelPlatformConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.config.v1.Config/DelPlatformConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DelPlatformConfig(ctx, req.(*PlatformConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_SetPlatformExtraConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlatformExtraConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).SetPlatformExtraConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.config.v1.Config/SetPlatformExtraConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).SetPlatformExtraConfig(ctx, req.(*SetPlatformExtraConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Config_ServiceDesc is the grpc.ServiceDesc for Config service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Config_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.tkeel.rudder.api.config.v1.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeploymentConfig",
			Handler:    _Config_GetDeploymentConfig_Handler,
		},
		{
			MethodName: "GetPlatformConfig",
			Handler:    _Config_GetPlatformConfig_Handler,
		},
		{
			MethodName: "DelPlatformConfig",
			Handler:    _Config_DelPlatformConfig_Handler,
		},
		{
			MethodName: "SetPlatformExtraConfig",
			Handler:    _Config_SetPlatformExtraConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/config/v1/config.proto",
}
