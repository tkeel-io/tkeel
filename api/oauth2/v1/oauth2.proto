/*
Copyright 2021 The tKeel Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package api.oauth2.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/tkeel-io/tkeel/api/oauth2/v1;v1";
option java_multiple_files = true;
option java_package = "api.oauth2.v1";

service Oauth2 {
  rpc IssuePluginToken(IssuePluginTokenRequest) returns (IssueTokenResponse) {
    option (google.api.http) = {
      post : "/oauth2/plugin"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "插件 Token 颁发接口"
      operation_id : "IssuePluginToken"
      tags : "Oauth2"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "SECRET_NOT_MATCH"}
        },
        {
          key : "400"
          value : {description : "INVAILD_PLUGIN_ID"}
        },

        {
          key : "500"
          value : {description : "INTERNAL_STORE"}
        }
      ]
    };
  };
  rpc AddPluginWhiteList(AddPluginWhiteListRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/oauth2/plugin/white-list"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "添加 Plugin 白名单 dapr App ID 接口"
      operation_id : "AddPluginWhiteList"
      tags : "Oauth2"
      responses : [
        {
          key : "204"
          value : {description : "SUCC_AND_NO_CONTENT"}
        },
        {
          key : "409"
          value : {description : "CLIENT_ID_ALREADY_EXISTS"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_STORE"}
        }
      ]
    };
  };
  rpc IssueAdminToken(IssueAdminTokenRequest) returns (IssueTokenResponse) {
    option (google.api.http) = {
      get : "/oauth2/admin"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "平台管理员 Token 颁发接口"
      operation_id : "IssueAdminToken"
      tags : "Oauth2"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "PASSWORD_NOT_MATCH"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };
}

message IssuePluginTokenRequest {
  string client_id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id(dapr app id)"
      } ];
  string client_secret = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin secret"
      } ];
}

message IssueTokenResponse {
  string access_token = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "oauth2 access token"
      } ];
  string token_type = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "oauth2 token type"
      } ];
  string refresh_token = 3
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "oauth2 refresh token"
      } ];
  int32 expires_in = 4
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "oauth2 token expires"
      } ];
}

message AddPluginWhiteListRequest {
  string plugin_id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id(dapr app id)"
      } ];
}

message IssueAdminTokenRequest {
  string password = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "admin password"
      } ];
}