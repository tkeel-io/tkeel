// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http 0.1.0

package v1

import (
	context "context"
	json "encoding/json"
	go_restful "github.com/emicklei/go-restful"
	http "net/http"
)

import transportHTTP "github.com/tkeel-io/kit/transport/http"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the tkeel package it is being compiled against.
// import package.context.http.go_restful.json.

const _ = transportHTTP.ImportAndUsed

type Oauth2HTTPServer interface {
	IssueOauth2Token(context.Context, *IssueOauth2TokenRequest) (*IssueOauth2TokenResponse, error)
}

type Oauth2HTTPHandler struct {
	srv Oauth2HTTPServer
}

func newOauth2HTTPHandler(s Oauth2HTTPServer) *Oauth2HTTPHandler {
	return &Oauth2HTTPHandler{srv: s}
}

func (h *Oauth2HTTPHandler) IssueOauth2Token(req *go_restful.Request, resp *go_restful.Response) {
	in := IssueOauth2TokenRequest{}
	if err := transportHTTP.GetBody(req, &in); err != nil {
		resp.WriteErrorString(http.StatusBadRequest, err.Error())
		return
	}

	out, err := h.srv.IssueOauth2Token(req.Request.Context(), &in)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}

	result, err := json.Marshal(out)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
	_, err = resp.Write(result)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
}

func RegisterOauth2HTTPServer(container *go_restful.Container, srv Oauth2HTTPServer) {
	var ws *go_restful.WebService
	for _, v := range container.RegisteredWebServices() {
		if v.RootPath() == "/v1" {
			ws = v
			break
		}
	}
	if ws == nil {
		ws = new(go_restful.WebService)
		ws.ApiVersion("/v1")
		ws.Path("/v1").Produces(go_restful.MIME_JSON)
		container.Add(ws)
	}

	handler := newOauth2HTTPHandler(srv)
	ws.Route(ws.POST("/oauth2").
		To(handler.IssueOauth2Token))
}
