// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	errors "github.com/tkeel-io/kit/errors"
	codes "google.golang.org/grpc/codes"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the ego package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

var pluginErrUnknown *errors.TError
var pluginErrPluginNotFound *errors.TError
var pluginErrPluginRouteNotFound *errors.TError
var pluginErrPluginAlreadyExists *errors.TError
var pluginErrListPlugin *errors.TError
var pluginErrInvalidArgument *errors.TError
var pluginErrInternalQueryPluginOpenapi *errors.TError
var pluginErrInternalStore *errors.TError
var pluginErrUnregisterPluginHasBeenDepended *errors.TError
var pluginErrDuplicateActiveTenant *errors.TError
var pluginErrInstallerNotFound *errors.TError
var pluginErrInstallInstaller *errors.TError
var pluginErrUninstallPlugin *errors.TError
var pluginErrOpenapiBindtenant *errors.TError

func init() {
	pluginErrUnknown = errors.New(int(codes.Unknown), "plugin.v1.PLUGIN_ERR_UNKNOWN", Error_PLUGIN_ERR_UNKNOWN.String())
	errors.Register(pluginErrUnknown)
	pluginErrPluginNotFound = errors.New(int(codes.NotFound), "plugin.v1.PLUGIN_ERR_PLUGIN_NOT_FOUND", Error_PLUGIN_ERR_PLUGIN_NOT_FOUND.String())
	errors.Register(pluginErrPluginNotFound)
	pluginErrPluginRouteNotFound = errors.New(int(codes.NotFound), "plugin.v1.PLUGIN_ERR_PLUGIN_ROUTE_NOT_FOUND", Error_PLUGIN_ERR_PLUGIN_ROUTE_NOT_FOUND.String())
	errors.Register(pluginErrPluginRouteNotFound)
	pluginErrPluginAlreadyExists = errors.New(int(codes.AlreadyExists), "plugin.v1.PLUGIN_ERR_PLUGIN_ALREADY_EXISTS", Error_PLUGIN_ERR_PLUGIN_ALREADY_EXISTS.String())
	errors.Register(pluginErrPluginAlreadyExists)
	pluginErrListPlugin = errors.New(int(codes.Internal), "plugin.v1.PLUGIN_ERR_LIST_PLUGIN", Error_PLUGIN_ERR_LIST_PLUGIN.String())
	errors.Register(pluginErrListPlugin)
	pluginErrInvalidArgument = errors.New(int(codes.InvalidArgument), "plugin.v1.PLUGIN_ERR_INVALID_ARGUMENT", Error_PLUGIN_ERR_INVALID_ARGUMENT.String())
	errors.Register(pluginErrInvalidArgument)
	pluginErrInternalQueryPluginOpenapi = errors.New(int(codes.Internal), "plugin.v1.PLUGIN_ERR_INTERNAL_QUERY_PLUGIN_OPENAPI", Error_PLUGIN_ERR_INTERNAL_QUERY_PLUGIN_OPENAPI.String())
	errors.Register(pluginErrInternalQueryPluginOpenapi)
	pluginErrInternalStore = errors.New(int(codes.Internal), "plugin.v1.PLUGIN_ERR_INTERNAL_STORE", Error_PLUGIN_ERR_INTERNAL_STORE.String())
	errors.Register(pluginErrInternalStore)
	pluginErrUnregisterPluginHasBeenDepended = errors.New(int(codes.Internal), "plugin.v1.PLUGIN_ERR_UNREGISTER_PLUGIN_HAS_BEEN_DEPENDED", Error_PLUGIN_ERR_UNREGISTER_PLUGIN_HAS_BEEN_DEPENDED.String())
	errors.Register(pluginErrUnregisterPluginHasBeenDepended)
	pluginErrDuplicateActiveTenant = errors.New(int(codes.AlreadyExists), "plugin.v1.PLUGIN_ERR_DUPLICATE_ACTIVE_TENANT", Error_PLUGIN_ERR_DUPLICATE_ACTIVE_TENANT.String())
	errors.Register(pluginErrDuplicateActiveTenant)
	pluginErrInstallerNotFound = errors.New(int(codes.NotFound), "plugin.v1.PLUGIN_ERR_INSTALLER_NOT_FOUND", Error_PLUGIN_ERR_INSTALLER_NOT_FOUND.String())
	errors.Register(pluginErrInstallerNotFound)
	pluginErrInstallInstaller = errors.New(int(codes.Internal), "plugin.v1.PLUGIN_ERR_INSTALL_INSTALLER", Error_PLUGIN_ERR_INSTALL_INSTALLER.String())
	errors.Register(pluginErrInstallInstaller)
	pluginErrUninstallPlugin = errors.New(int(codes.Internal), "plugin.v1.PLUGIN_ERR_UNINSTALL_PLUGIN", Error_PLUGIN_ERR_UNINSTALL_PLUGIN.String())
	errors.Register(pluginErrUninstallPlugin)
	pluginErrOpenapiBindtenant = errors.New(int(codes.InvalidArgument), "plugin.v1.PLUGIN_ERR_OPENAPI_BINDTENANT", Error_PLUGIN_ERR_OPENAPI_BINDTENANT.String())
	errors.Register(pluginErrOpenapiBindtenant)
}

func PluginErrUnknown() errors.Error {
	return pluginErrUnknown
}

func PluginErrPluginNotFound() errors.Error {
	return pluginErrPluginNotFound
}

func PluginErrPluginRouteNotFound() errors.Error {
	return pluginErrPluginRouteNotFound
}

func PluginErrPluginAlreadyExists() errors.Error {
	return pluginErrPluginAlreadyExists
}

func PluginErrListPlugin() errors.Error {
	return pluginErrListPlugin
}

func PluginErrInvalidArgument() errors.Error {
	return pluginErrInvalidArgument
}

func PluginErrInternalQueryPluginOpenapi() errors.Error {
	return pluginErrInternalQueryPluginOpenapi
}

func PluginErrInternalStore() errors.Error {
	return pluginErrInternalStore
}

func PluginErrUnregisterPluginHasBeenDepended() errors.Error {
	return pluginErrUnregisterPluginHasBeenDepended
}

func PluginErrDuplicateActiveTenant() errors.Error {
	return pluginErrDuplicateActiveTenant
}

func PluginErrInstallerNotFound() errors.Error {
	return pluginErrInstallerNotFound
}

func PluginErrInstallInstaller() errors.Error {
	return pluginErrInstallInstaller
}

func PluginErrUninstallPlugin() errors.Error {
	return pluginErrUninstallPlugin
}

func PluginErrOpenapiBindtenant() errors.Error {
	return pluginErrOpenapiBindtenant
}
