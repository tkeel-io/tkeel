// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	errors "github.com/tkeel-io/kit/errors"
	codes "google.golang.org/grpc/codes"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the ego package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

var pluginErrUnknown *errors.TError
var pluginErrPluginNotFound *errors.TError
var pluginErrPluginRouteNotFound *errors.TError
var pluginErrPluginAlreadyExists *errors.TError
var pluginErrListPlugin *errors.TError
var pluginErrInvalidArgument *errors.TError
var pluginErrInternalQueryPluginOpenapi *errors.TError
var pluginErrInternalStore *errors.TError
var pluginErrUninstallPluginHasBeenDepended *errors.TError
var pluginErrDuplicateEnableTenant *errors.TError
var pluginErrInstallerNotFound *errors.TError
var pluginErrInstallInstaller *errors.TError
var pluginErrUninstallPlugin *errors.TError
var pluginErrOpenapiEnabletenant *errors.TError
var pluginErrPluginHasTenantEnabled *errors.TError
var pluginErrOpenapiDisableTenant *errors.TError

func init() {
	pluginErrUnknown = errors.New(int(codes.Unknown), "io.tkeel.rudder.api.plugin.v1.PLUGIN_ERR_UNKNOWN", "未知类型")
	errors.Register(pluginErrUnknown)
	pluginErrPluginNotFound = errors.New(int(codes.NotFound), "io.tkeel.rudder.api.plugin.v1.PLUGIN_ERR_PLUGIN_NOT_FOUND", "找不到Plugin")
	errors.Register(pluginErrPluginNotFound)
	pluginErrPluginRouteNotFound = errors.New(int(codes.NotFound), "io.tkeel.rudder.api.plugin.v1.PLUGIN_ERR_PLUGIN_ROUTE_NOT_FOUND", "找不到PluginRoute")
	errors.Register(pluginErrPluginRouteNotFound)
	pluginErrPluginAlreadyExists = errors.New(int(codes.AlreadyExists), "io.tkeel.rudder.api.plugin.v1.PLUGIN_ERR_PLUGIN_ALREADY_EXISTS", "找不到PluginRoute")
	errors.Register(pluginErrPluginAlreadyExists)
	pluginErrListPlugin = errors.New(int(codes.Internal), "io.tkeel.rudder.api.plugin.v1.PLUGIN_ERR_LIST_PLUGIN", "获取Plugin列表数据出错")
	errors.Register(pluginErrListPlugin)
	pluginErrInvalidArgument = errors.New(int(codes.InvalidArgument), "io.tkeel.rudder.api.plugin.v1.PLUGIN_ERR_INVALID_ARGUMENT", "请求参数无效")
	errors.Register(pluginErrInvalidArgument)
	pluginErrInternalQueryPluginOpenapi = errors.New(int(codes.Internal), "io.tkeel.rudder.api.plugin.v1.PLUGIN_ERR_INTERNAL_QUERY_PLUGIN_OPENAPI", "请求PluginOPENAPI")
	errors.Register(pluginErrInternalQueryPluginOpenapi)
	pluginErrInternalStore = errors.New(int(codes.Internal), "io.tkeel.rudder.api.plugin.v1.PLUGIN_ERR_INTERNAL_STORE", "请求后端存储错误")
	errors.Register(pluginErrInternalStore)
	pluginErrUninstallPluginHasBeenDepended = errors.New(int(codes.Internal), "io.tkeel.rudder.api.plugin.v1.PLUGIN_ERR_UNINSTALL_PLUGIN_HAS_BEEN_DEPENDED", "删除的插件被依赖")
	errors.Register(pluginErrUninstallPluginHasBeenDepended)
	pluginErrDuplicateEnableTenant = errors.New(int(codes.AlreadyExists), "io.tkeel.rudder.api.plugin.v1.PLUGIN_ERR_DUPLICATE_ENABLE_TENANT", "租户重复启用插件")
	errors.Register(pluginErrDuplicateEnableTenant)
	pluginErrInstallerNotFound = errors.New(int(codes.NotFound), "io.tkeel.rudder.api.plugin.v1.PLUGIN_ERR_INSTALLER_NOT_FOUND", "插件安装包未找到")
	errors.Register(pluginErrInstallerNotFound)
	pluginErrInstallInstaller = errors.New(int(codes.Internal), "io.tkeel.rudder.api.plugin.v1.PLUGIN_ERR_INSTALL_INSTALLER", "安装包安装插件错误")
	errors.Register(pluginErrInstallInstaller)
	pluginErrUninstallPlugin = errors.New(int(codes.Internal), "io.tkeel.rudder.api.plugin.v1.PLUGIN_ERR_UNINSTALL_PLUGIN", "卸载插件错误")
	errors.Register(pluginErrUninstallPlugin)
	pluginErrOpenapiEnabletenant = errors.New(int(codes.InvalidArgument), "io.tkeel.rudder.api.plugin.v1.PLUGIN_ERR_OPENAPI_ENABLETENANT", "租户启用访问OPENAPI错误")
	errors.Register(pluginErrOpenapiEnabletenant)
	pluginErrPluginHasTenantEnabled = errors.New(int(codes.InvalidArgument), "io.tkeel.rudder.api.plugin.v1.PLUGIN_ERR_PLUGIN_HAS_TENANT_ENABLED", "插件有租户仍启用")
	errors.Register(pluginErrPluginHasTenantEnabled)
	pluginErrOpenapiDisableTenant = errors.New(int(codes.InvalidArgument), "io.tkeel.rudder.api.plugin.v1.PLUGIN_ERR_OPENAPI_DISABLE_TENANT", "租户停用访问OPENAPI错误")
	errors.Register(pluginErrOpenapiDisableTenant)
}

func PluginErrUnknown() errors.Error {
	return pluginErrUnknown
}

func PluginErrPluginNotFound() errors.Error {
	return pluginErrPluginNotFound
}

func PluginErrPluginRouteNotFound() errors.Error {
	return pluginErrPluginRouteNotFound
}

func PluginErrPluginAlreadyExists() errors.Error {
	return pluginErrPluginAlreadyExists
}

func PluginErrListPlugin() errors.Error {
	return pluginErrListPlugin
}

func PluginErrInvalidArgument() errors.Error {
	return pluginErrInvalidArgument
}

func PluginErrInternalQueryPluginOpenapi() errors.Error {
	return pluginErrInternalQueryPluginOpenapi
}

func PluginErrInternalStore() errors.Error {
	return pluginErrInternalStore
}

func PluginErrUninstallPluginHasBeenDepended() errors.Error {
	return pluginErrUninstallPluginHasBeenDepended
}

func PluginErrDuplicateEnableTenant() errors.Error {
	return pluginErrDuplicateEnableTenant
}

func PluginErrInstallerNotFound() errors.Error {
	return pluginErrInstallerNotFound
}

func PluginErrInstallInstaller() errors.Error {
	return pluginErrInstallInstaller
}

func PluginErrUninstallPlugin() errors.Error {
	return pluginErrUninstallPlugin
}

func PluginErrOpenapiEnabletenant() errors.Error {
	return pluginErrOpenapiEnabletenant
}

func PluginErrPluginHasTenantEnabled() errors.Error {
	return pluginErrPluginHasTenantEnabled
}

func PluginErrOpenapiDisableTenant() errors.Error {
	return pluginErrOpenapiDisableTenant
}
