//
//Copyright 2021 The tKeel Authors.
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: api/plugin/v1/plugin.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v1 "github.com/tkeel-io/tkeel-interface/openapi/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConfigurationType int32

const (
	ConfigurationType_JSON ConfigurationType = 0
	ConfigurationType_YAML ConfigurationType = 1
)

// Enum value maps for ConfigurationType.
var (
	ConfigurationType_name = map[int32]string{
		0: "JSON",
		1: "YAML",
	}
	ConfigurationType_value = map[string]int32{
		"JSON": 0,
		"YAML": 1,
	}
)

func (x ConfigurationType) Enum() *ConfigurationType {
	p := new(ConfigurationType)
	*p = x
	return p
}

func (x ConfigurationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigurationType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_plugin_v1_plugin_proto_enumTypes[0].Descriptor()
}

func (ConfigurationType) Type() protoreflect.EnumType {
	return &file_api_plugin_v1_plugin_proto_enumTypes[0]
}

func (x ConfigurationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigurationType.Descriptor instead.
func (ConfigurationType) EnumDescriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{0}
}

//*
// Register Addons.
type RegisterAddons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addons   string `protobuf:"bytes,1,opt,name=addons,proto3" json:"addons,omitempty"`     // addons name.
	Upstream string `protobuf:"bytes,2,opt,name=upstream,proto3" json:"upstream,omitempty"` // upstream path.
}

func (x *RegisterAddons) Reset() {
	*x = RegisterAddons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAddons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAddons) ProtoMessage() {}

func (x *RegisterAddons) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAddons.ProtoReflect.Descriptor instead.
func (*RegisterAddons) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterAddons) GetAddons() string {
	if x != nil {
		return x.Addons
	}
	return ""
}

func (x *RegisterAddons) GetUpstream() string {
	if x != nil {
		return x.Upstream
	}
	return ""
}

//*
// Installer.
type Installer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Repo          string                 `protobuf:"bytes,3,opt,name=repo,proto3" json:"repo,omitempty"`
	Icon          string                 `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Desc          string                 `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	Configuration []byte                 `protobuf:"bytes,6,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Type          ConfigurationType      `protobuf:"varint,7,opt,name=type,proto3,enum=io.tkeel.rudder.api.plugin.v1.ConfigurationType" json:"type,omitempty"`
	Maintainers   []*InstallerMaintainer `protobuf:"bytes,8,rep,name=maintainers,proto3" json:"maintainers,omitempty"`
}

func (x *Installer) Reset() {
	*x = Installer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Installer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Installer) ProtoMessage() {}

func (x *Installer) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Installer.ProtoReflect.Descriptor instead.
func (*Installer) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *Installer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Installer) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Installer) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *Installer) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Installer) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Installer) GetConfiguration() []byte {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *Installer) GetType() ConfigurationType {
	if x != nil {
		return x.Type
	}
	return ConfigurationType_JSON
}

func (x *Installer) GetMaintainers() []*InstallerMaintainer {
	if x != nil {
		return x.Maintainers
	}
	return nil
}

type EnabledTenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Remark          string `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"`
	TenantId        string `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                       // enable tenant id.
	OperatorId      string `protobuf:"bytes,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                 // operator user id.
	EnableTimestamp int64  `protobuf:"varint,5,opt,name=enable_timestamp,json=enableTimestamp,proto3" json:"enable_timestamp,omitempty"` // enable timestamp.
	UserNum         int32  `protobuf:"varint,6,opt,name=user_num,json=userNum,proto3" json:"user_num,omitempty"`
}

func (x *EnabledTenant) Reset() {
	*x = EnabledTenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnabledTenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnabledTenant) ProtoMessage() {}

func (x *EnabledTenant) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnabledTenant.ProtoReflect.Descriptor instead.
func (*EnabledTenant) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{2}
}

func (x *EnabledTenant) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EnabledTenant) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *EnabledTenant) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *EnabledTenant) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *EnabledTenant) GetEnableTimestamp() int64 {
	if x != nil {
		return x.EnableTimestamp
	}
	return 0
}

func (x *EnabledTenant) GetUserNum() int32 {
	if x != nil {
		return x.UserNum
	}
	return 0
}

type PluginBrief struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // plugin id.
	Version           string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                                               // plugin version
	RegisterTimestamp int64           `protobuf:"varint,3,opt,name=register_timestamp,json=registerTimestamp,proto3" json:"register_timestamp,omitempty"` // register timestamp.
	TkeelVersion      string          `protobuf:"bytes,4,opt,name=tkeel_version,json=tkeelVersion,proto3" json:"tkeel_version,omitempty"`                 // plugin depend tkeel version.
	InstallerBrief    *Installer      `protobuf:"bytes,5,opt,name=installer_brief,json=installerBrief,proto3" json:"installer_brief,omitempty"`           // register plugin status
	TenantEnable      bool            `protobuf:"varint,6,opt,name=tenant_enable,json=tenantEnable,proto3" json:"tenant_enable,omitempty"`                // tenant enable.
	Status            v1.PluginStatus `protobuf:"varint,7,opt,name=status,proto3,enum=openapi.v1.PluginStatus" json:"status,omitempty"`                   // register plugin status.
}

func (x *PluginBrief) Reset() {
	*x = PluginBrief{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginBrief) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginBrief) ProtoMessage() {}

func (x *PluginBrief) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginBrief.ProtoReflect.Descriptor instead.
func (*PluginBrief) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *PluginBrief) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PluginBrief) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PluginBrief) GetRegisterTimestamp() int64 {
	if x != nil {
		return x.RegisterTimestamp
	}
	return 0
}

func (x *PluginBrief) GetTkeelVersion() string {
	if x != nil {
		return x.TkeelVersion
	}
	return ""
}

func (x *PluginBrief) GetInstallerBrief() *Installer {
	if x != nil {
		return x.InstallerBrief
	}
	return nil
}

func (x *PluginBrief) GetTenantEnable() bool {
	if x != nil {
		return x.TenantEnable
	}
	return false
}

func (x *PluginBrief) GetStatus() v1.PluginStatus {
	if x != nil {
		return x.Status
	}
	return v1.PluginStatus(0)
}

//*
// plugin object.
type PluginObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugin            *PluginBrief            `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`                                                // plugin brief info.
	AddonsPoint       []*v1.AddonsPoint       `protobuf:"bytes,2,rep,name=addons_point,json=addonsPoint,proto3" json:"addons_point,omitempty"`                   // plugin declares addons.
	ImplementedPlugin []*v1.ImplementedPlugin `protobuf:"bytes,3,rep,name=implemented_plugin,json=implementedPlugin,proto3" json:"implemented_plugin,omitempty"` // plugin implemented plugin list.
	Secret            string                  `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`                                                // plugin registered secret.
	EnableTenantes    []*EnabledTenant        `protobuf:"bytes,5,rep,name=enable_tenantes,json=enableTenantes,proto3" json:"enable_tenantes,omitempty"`          // enable tenant's id list.
	RegisterAddons    []*RegisterAddons       `protobuf:"bytes,6,rep,name=register_addons,json=registerAddons,proto3" json:"register_addons,omitempty"`          // register addons router.
	ConsoleEntries    []*v1.ConsoleEntry      `protobuf:"bytes,7,rep,name=console_entries,json=consoleEntries,proto3" json:"console_entries,omitempty"`
}

func (x *PluginObject) Reset() {
	*x = PluginObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginObject) ProtoMessage() {}

func (x *PluginObject) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginObject.ProtoReflect.Descriptor instead.
func (*PluginObject) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{4}
}

func (x *PluginObject) GetPlugin() *PluginBrief {
	if x != nil {
		return x.Plugin
	}
	return nil
}

func (x *PluginObject) GetAddonsPoint() []*v1.AddonsPoint {
	if x != nil {
		return x.AddonsPoint
	}
	return nil
}

func (x *PluginObject) GetImplementedPlugin() []*v1.ImplementedPlugin {
	if x != nil {
		return x.ImplementedPlugin
	}
	return nil
}

func (x *PluginObject) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *PluginObject) GetEnableTenantes() []*EnabledTenant {
	if x != nil {
		return x.EnableTenantes
	}
	return nil
}

func (x *PluginObject) GetRegisterAddons() []*RegisterAddons {
	if x != nil {
		return x.RegisterAddons
	}
	return nil
}

func (x *PluginObject) GetConsoleEntries() []*v1.ConsoleEntry {
	if x != nil {
		return x.ConsoleEntries
	}
	return nil
}

type InstallPluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Installer *Installer `protobuf:"bytes,2,opt,name=installer,proto3" json:"installer,omitempty"`
}

func (x *InstallPluginRequest) Reset() {
	*x = InstallPluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallPluginRequest) ProtoMessage() {}

func (x *InstallPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallPluginRequest.ProtoReflect.Descriptor instead.
func (*InstallPluginRequest) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{5}
}

func (x *InstallPluginRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InstallPluginRequest) GetInstaller() *Installer {
	if x != nil {
		return x.Installer
	}
	return nil
}

type InstallPluginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugin *PluginObject `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
}

func (x *InstallPluginResponse) Reset() {
	*x = InstallPluginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallPluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallPluginResponse) ProtoMessage() {}

func (x *InstallPluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallPluginResponse.ProtoReflect.Descriptor instead.
func (*InstallPluginResponse) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{6}
}

func (x *InstallPluginResponse) GetPlugin() *PluginObject {
	if x != nil {
		return x.Plugin
	}
	return nil
}

type UpgradePluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Installer *Installer `protobuf:"bytes,2,opt,name=installer,proto3" json:"installer,omitempty"`
}

func (x *UpgradePluginRequest) Reset() {
	*x = UpgradePluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradePluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePluginRequest) ProtoMessage() {}

func (x *UpgradePluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePluginRequest.ProtoReflect.Descriptor instead.
func (*UpgradePluginRequest) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{7}
}

func (x *UpgradePluginRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpgradePluginRequest) GetInstaller() *Installer {
	if x != nil {
		return x.Installer
	}
	return nil
}

type UpgradePluginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugin *PluginObject `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
}

func (x *UpgradePluginResponse) Reset() {
	*x = UpgradePluginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradePluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePluginResponse) ProtoMessage() {}

func (x *UpgradePluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePluginResponse.ProtoReflect.Descriptor instead.
func (*UpgradePluginResponse) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{8}
}

func (x *UpgradePluginResponse) GetPlugin() *PluginObject {
	if x != nil {
		return x.Plugin
	}
	return nil
}

type UninstallPluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UninstallPluginRequest) Reset() {
	*x = UninstallPluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UninstallPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninstallPluginRequest) ProtoMessage() {}

func (x *UninstallPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninstallPluginRequest.ProtoReflect.Descriptor instead.
func (*UninstallPluginRequest) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{9}
}

func (x *UninstallPluginRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UninstallPluginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugin *PluginObject `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
}

func (x *UninstallPluginResponse) Reset() {
	*x = UninstallPluginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UninstallPluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninstallPluginResponse) ProtoMessage() {}

func (x *UninstallPluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninstallPluginResponse.ProtoReflect.Descriptor instead.
func (*UninstallPluginResponse) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{10}
}

func (x *UninstallPluginResponse) GetPlugin() *PluginObject {
	if x != nil {
		return x.Plugin
	}
	return nil
}

type GetPluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPluginRequest) Reset() {
	*x = GetPluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPluginRequest) ProtoMessage() {}

func (x *GetPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPluginRequest.ProtoReflect.Descriptor instead.
func (*GetPluginRequest) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{11}
}

func (x *GetPluginRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPluginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugin *PluginObject `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
}

func (x *GetPluginResponse) Reset() {
	*x = GetPluginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPluginResponse) ProtoMessage() {}

func (x *GetPluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPluginResponse.ProtoReflect.Descriptor instead.
func (*GetPluginResponse) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{12}
}

func (x *GetPluginResponse) GetPlugin() *PluginObject {
	if x != nil {
		return x.Plugin
	}
	return nil
}

type ListPluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum          int32  `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize         int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderBy          string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	IsDescending     bool   `protobuf:"varint,4,opt,name=is_descending,json=isDescending,proto3" json:"is_descending,omitempty"`
	KeyWords         string `protobuf:"bytes,5,opt,name=key_words,json=keyWords,proto3" json:"key_words,omitempty"`
	DisplayAllPlugin bool   `protobuf:"varint,10,opt,name=display_all_plugin,json=displayAllPlugin,proto3" json:"display_all_plugin,omitempty"`
}

func (x *ListPluginRequest) Reset() {
	*x = ListPluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPluginRequest) ProtoMessage() {}

func (x *ListPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPluginRequest.ProtoReflect.Descriptor instead.
func (*ListPluginRequest) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{13}
}

func (x *ListPluginRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListPluginRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPluginRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListPluginRequest) GetIsDescending() bool {
	if x != nil {
		return x.IsDescending
	}
	return false
}

func (x *ListPluginRequest) GetKeyWords() string {
	if x != nil {
		return x.KeyWords
	}
	return ""
}

func (x *ListPluginRequest) GetDisplayAllPlugin() bool {
	if x != nil {
		return x.DisplayAllPlugin
	}
	return false
}

type ListPluginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      int32          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	PageNum    int32          `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize   int32          `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PluginList []*PluginBrief `protobuf:"bytes,10,rep,name=plugin_list,json=pluginList,proto3" json:"plugin_list,omitempty"`
	EnableNum  int32          `protobuf:"varint,11,opt,name=enable_num,json=enableNum,proto3" json:"enable_num,omitempty"`
}

func (x *ListPluginResponse) Reset() {
	*x = ListPluginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPluginResponse) ProtoMessage() {}

func (x *ListPluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPluginResponse.ProtoReflect.Descriptor instead.
func (*ListPluginResponse) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{14}
}

func (x *ListPluginResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListPluginResponse) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListPluginResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPluginResponse) GetPluginList() []*PluginBrief {
	if x != nil {
		return x.PluginList
	}
	return nil
}

func (x *ListPluginResponse) GetEnableNum() int32 {
	if x != nil {
		return x.EnableNum
	}
	return 0
}

type TenantEnableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Extra *TenantEnableRequest_EnableExtraData `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *TenantEnableRequest) Reset() {
	*x = TenantEnableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantEnableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantEnableRequest) ProtoMessage() {}

func (x *TenantEnableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantEnableRequest.ProtoReflect.Descriptor instead.
func (*TenantEnableRequest) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{15}
}

func (x *TenantEnableRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TenantEnableRequest) GetExtra() *TenantEnableRequest_EnableExtraData {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TenantDisableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Extra []byte `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *TenantDisableRequest) Reset() {
	*x = TenantDisableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantDisableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantDisableRequest) ProtoMessage() {}

func (x *TenantDisableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantDisableRequest.ProtoReflect.Descriptor instead.
func (*TenantDisableRequest) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{16}
}

func (x *TenantDisableRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TenantDisableRequest) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ListEnabledTenantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      int32  `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderBy      string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	IsDescending bool   `protobuf:"varint,4,opt,name=is_descending,json=isDescending,proto3" json:"is_descending,omitempty"`
	KeyWords     string `protobuf:"bytes,5,opt,name=key_words,json=keyWords,proto3" json:"key_words,omitempty"`
	Id           string `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListEnabledTenantsRequest) Reset() {
	*x = ListEnabledTenantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledTenantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledTenantsRequest) ProtoMessage() {}

func (x *ListEnabledTenantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledTenantsRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledTenantsRequest) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{17}
}

func (x *ListEnabledTenantsRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListEnabledTenantsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEnabledTenantsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListEnabledTenantsRequest) GetIsDescending() bool {
	if x != nil {
		return x.IsDescending
	}
	return false
}

func (x *ListEnabledTenantsRequest) GetKeyWords() string {
	if x != nil {
		return x.KeyWords
	}
	return ""
}

func (x *ListEnabledTenantsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListEnabledTenantsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	PageNum  int32            `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize int32            `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Tenants  []*EnabledTenant `protobuf:"bytes,10,rep,name=tenants,proto3" json:"tenants,omitempty"`
}

func (x *ListEnabledTenantsResponse) Reset() {
	*x = ListEnabledTenantsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledTenantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledTenantsResponse) ProtoMessage() {}

func (x *ListEnabledTenantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledTenantsResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledTenantsResponse) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{18}
}

func (x *ListEnabledTenantsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListEnabledTenantsResponse) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListEnabledTenantsResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEnabledTenantsResponse) GetTenants() []*EnabledTenant {
	if x != nil {
		return x.Tenants
	}
	return nil
}

type TMUpdatePluginIdentifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TMUpdatePluginIdentifyRequest) Reset() {
	*x = TMUpdatePluginIdentifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMUpdatePluginIdentifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMUpdatePluginIdentifyRequest) ProtoMessage() {}

func (x *TMUpdatePluginIdentifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMUpdatePluginIdentifyRequest.ProtoReflect.Descriptor instead.
func (*TMUpdatePluginIdentifyRequest) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{19}
}

func (x *TMUpdatePluginIdentifyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TMRegisterPluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TMRegisterPluginRequest) Reset() {
	*x = TMRegisterPluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMRegisterPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMRegisterPluginRequest) ProtoMessage() {}

func (x *TMRegisterPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMRegisterPluginRequest.ProtoReflect.Descriptor instead.
func (*TMRegisterPluginRequest) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{20}
}

func (x *TMRegisterPluginRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type InstallerMaintainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Url   string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *InstallerMaintainer) Reset() {
	*x = InstallerMaintainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallerMaintainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallerMaintainer) ProtoMessage() {}

func (x *InstallerMaintainer) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallerMaintainer.ProtoReflect.Descriptor instead.
func (*InstallerMaintainer) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{1, 0}
}

func (x *InstallerMaintainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstallerMaintainer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *InstallerMaintainer) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type TenantEnableRequest_EnableExtraData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc  string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	Extra []byte `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *TenantEnableRequest_EnableExtraData) Reset() {
	*x = TenantEnableRequest_EnableExtraData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_plugin_v1_plugin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantEnableRequest_EnableExtraData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantEnableRequest_EnableExtraData) ProtoMessage() {}

func (x *TenantEnableRequest_EnableExtraData) ProtoReflect() protoreflect.Message {
	mi := &file_api_plugin_v1_plugin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantEnableRequest_EnableExtraData.ProtoReflect.Descriptor instead.
func (*TenantEnableRequest_EnableExtraData) Descriptor() ([]byte, []int) {
	return file_api_plugin_v1_plugin_proto_rawDescGZIP(), []int{15, 0}
}

func (x *TenantEnableRequest_EnableExtraData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *TenantEnableRequest_EnableExtraData) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

var File_api_plugin_v1_plugin_proto protoreflect.FileDescriptor

var file_api_plugin_v1_plugin_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x69, 0x6f,
	0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x6a, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x08,
	0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0x92, 0x41, 0x0f, 0x32, 0x0d, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x70, 0x61,
	0x74, 0x68, 0x52, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x8a, 0x05, 0x0a,
	0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12,
	0x27, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92,
	0x41, 0x10, 0x32, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x69, 0x63,
	0x6f, 0x6e, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x64, 0x65, 0x73, 0x63, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x47, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b,
	0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32,
	0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x71, 0x0a, 0x0b, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52,
	0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x1a, 0x8a, 0x01, 0x0a,
	0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x25, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x20, 0x75, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xdb, 0x02, 0x0a, 0x0d, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32,
	0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x32, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x32,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x64, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x10, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1e,
	0x92, 0x41, 0x1b, 0x32, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0x97, 0x04, 0x0a, 0x0b, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x20, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x45,
	0x0a, 0x0d, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x20,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xa1, 0x01, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x32, 0x49,
	0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20,
	0x69, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x2c, 0x76, 0x65, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2c, 0x72, 0x65, 0x70, 0x6f, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x37, 0x0a, 0x0d, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x1b, 0x92, 0x41,
	0x18, 0x32, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xb7, 0x05, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x5a, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75,
	0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x72, 0x69, 0x65, 0x66, 0x42, 0x16,
	0x92, 0x41, 0x13, 0x32, 0x11, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x62, 0x72, 0x69, 0x65,
	0x66, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x57,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x1b, 0x92,
	0x41, 0x18, 0x32, 0x16, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x65, 0x73, 0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x12, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32,
	0x18, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x73, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e,
	0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x27, 0x73, 0x20, 0x69,
	0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x42, 0x1b,
	0x92, 0x41, 0x18, 0x32, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1b,
	0x92, 0x41, 0x18, 0x32, 0x16, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x14,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x20, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x70, 0x0a, 0x15, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75,
	0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x14,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x20, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x70, 0x0a, 0x15, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75,
	0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x38, 0x0a, 0x16, 0x55,
	0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x69,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x17, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x12, 0x92,
	0x41, 0x0f, 0x32, 0x0d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x32, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6c, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75,
	0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0xf3, 0x02, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20,
	0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x20, 0x62, 0x79, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x43, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32,
	0x19, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x20, 0x73, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x65,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x32, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x6b, 0x65,
	0x79, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x12, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52,
	0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x22, 0xc2, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x70,
	0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x64, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f,
	0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x42, 0x72, 0x69, 0x65, 0x66, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xff, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32,
	0x09, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x69,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x5d, 0x0a, 0x0f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x5d, 0x0a, 0x14, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41,
	0x0b, 0x32, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xd5, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x32, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x73, 0x69, 0x7a,
	0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x32, 0x1a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x43, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1e,
	0x92, 0x41, 0x1b, 0x32, 0x19, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x20, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x20, 0x73, 0x6f, 0x72, 0x74, 0x52, 0x0c,
	0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x09,
	0x6b, 0x65, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x20, 0x6b, 0x65, 0x79, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x1e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b,
	0x32, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x93, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x92,
	0x41, 0x0d, 0x32, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0x92, 0x41,
	0x11, 0x32, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x73, 0x69,
	0x7a, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x67, 0x0a, 0x07,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x32, 0x1a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x1d, 0x54, 0x4d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x17, 0x54, 0x4d, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x2a, 0x27, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x59, 0x41, 0x4d, 0x4c, 0x10, 0x01, 0x32, 0x8f, 0x16, 0x0a, 0x06, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0xd4, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65,
	0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69,
	0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xd7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x0d, 0x2f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x92, 0x41, 0xb3, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x12, 0x12, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe6, 0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe6,
	0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x2a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x4a, 0x0d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x06, 0x0a, 0x04, 0x53,
	0x55, 0x43, 0x43, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x12, 0x0a, 0x10, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x4a, 0x2a,
	0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23, 0x0a, 0x21, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x52,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x4a, 0x17, 0x0a, 0x03, 0x34, 0x30,
	0x39, 0x12, 0x10, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x4a, 0x17, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x10, 0x0a, 0x0e, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x12, 0xd4, 0x02, 0x0a,
	0x0d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x33,
	0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72,
	0x75, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x1a, 0x0d, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x3a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x92, 0x41, 0xb3, 0x01,
	0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe6, 0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x2a, 0x0d, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4a, 0x0d, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x06, 0x0a, 0x04, 0x53, 0x55, 0x43, 0x43, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x12, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23, 0x0a, 0x21,
	0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x4a, 0x17, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x10, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x4a, 0x17, 0x0a, 0x03, 0x35, 0x30,
	0x30, 0x12, 0x10, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x12, 0xa5, 0x02, 0x0a, 0x0f, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65,
	0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x2a,
	0x0d, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41,
	0x89, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x12, 0xe5, 0x8d, 0xb8, 0xe8,
	0xbd, 0xbd, 0xe6, 0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x2a, 0x0f,
	0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4a,
	0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x4a, 0x19, 0x0a, 0x03,
	0x34, 0x30, 0x30, 0x12, 0x12, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41,
	0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x12,
	0x0a, 0x10, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x4a, 0x17, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x10, 0x0a, 0x0e, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x8d, 0x02, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x74,
	0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69, 0x6f, 0x2e,
	0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x83, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0x2a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4a,
	0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x4a, 0x19, 0x0a, 0x03,
	0x34, 0x30, 0x30, 0x12, 0x12, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41,
	0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x12,
	0x0a, 0x10, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x4a, 0x17, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x10, 0x0a, 0x0e, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0xf6, 0x01, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x2e, 0x69, 0x6f, 0x2e,
	0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69,
	0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x92, 0x41, 0x6f, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x18, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x2a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b,
	0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x12, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x4a, 0x17, 0x0a, 0x03, 0x35,
	0x30, 0x30, 0x12, 0x10, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x12, 0xf5, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c,
	0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x98, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x15, 0x2f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x73, 0x3a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x92, 0x41, 0x71, 0x0a, 0x06, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x12, 0x18, 0xe6, 0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe7, 0xa7, 0x9f, 0xe6, 0x88,
	0xb7, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x2a, 0x0c, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x0b, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0x12, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x4a, 0x17, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x10, 0x0a, 0x0e, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0xf1, 0x01, 0x0a,
	0x0d, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33,
	0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x92, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x92, 0x41, 0x72, 0x0a, 0x06,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x18, 0xe6, 0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe7, 0xa7,
	0x9f, 0xe6, 0x88, 0xb7, 0xe5, 0x81, 0x9c, 0xe7, 0x94, 0xa8, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3,
	0x2a, 0x0d, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4a,
	0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x4a, 0x19, 0x0a, 0x03,
	0x34, 0x30, 0x30, 0x12, 0x12, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41,
	0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x4a, 0x17, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x10,
	0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x12, 0xa8, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65,
	0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64,
	0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x92, 0x41, 0x7c, 0x0a,
	0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6,
	0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7, 0xa7, 0x9f, 0xe6, 0x88,
	0xb7, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x2a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x12,
	0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45,
	0x4e, 0x54, 0x4a, 0x17, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x10, 0x0a, 0x0e, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x92, 0x02, 0x0a, 0x16,
	0x54, 0x4d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65,
	0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x4d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa1, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x74, 0x6d, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x92, 0x41, 0x81, 0x01, 0x0a,
	0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6,
	0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7, 0xa7, 0x9f, 0xe6, 0x88,
	0xb7, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x2a, 0x16, 0x54, 0x4d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x4a,
	0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x4a, 0x19, 0x0a, 0x03,
	0x34, 0x30, 0x30, 0x12, 0x12, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41,
	0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x4a, 0x17, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x10,
	0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x12, 0xf9, 0x01, 0x0a, 0x10, 0x54, 0x4d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c,
	0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x4d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14,
	0x2f, 0x74, 0x6d, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x92, 0x41, 0x75, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12,
	0x18, 0xe6, 0x89, 0x8b, 0xe5, 0x8a, 0xa8, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe6, 0x8f, 0x92,
	0xe4, 0xbb, 0xb6, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x2a, 0x10, 0x54, 0x4d, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4a, 0x0b, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0x12, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x4a, 0x17, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x10, 0x0a, 0x0e, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x42, 0x4d, 0x0a, 0x1d,
	0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a,
	0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x6b, 0x65, 0x65,
	0x6c, 0x2d, 0x69, 0x6f, 0x2f, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_plugin_v1_plugin_proto_rawDescOnce sync.Once
	file_api_plugin_v1_plugin_proto_rawDescData = file_api_plugin_v1_plugin_proto_rawDesc
)

func file_api_plugin_v1_plugin_proto_rawDescGZIP() []byte {
	file_api_plugin_v1_plugin_proto_rawDescOnce.Do(func() {
		file_api_plugin_v1_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_plugin_v1_plugin_proto_rawDescData)
	})
	return file_api_plugin_v1_plugin_proto_rawDescData
}

var file_api_plugin_v1_plugin_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_plugin_v1_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_api_plugin_v1_plugin_proto_goTypes = []interface{}{
	(ConfigurationType)(0),                      // 0: io.tkeel.rudder.api.plugin.v1.ConfigurationType
	(*RegisterAddons)(nil),                      // 1: io.tkeel.rudder.api.plugin.v1.RegisterAddons
	(*Installer)(nil),                           // 2: io.tkeel.rudder.api.plugin.v1.Installer
	(*EnabledTenant)(nil),                       // 3: io.tkeel.rudder.api.plugin.v1.EnabledTenant
	(*PluginBrief)(nil),                         // 4: io.tkeel.rudder.api.plugin.v1.PluginBrief
	(*PluginObject)(nil),                        // 5: io.tkeel.rudder.api.plugin.v1.PluginObject
	(*InstallPluginRequest)(nil),                // 6: io.tkeel.rudder.api.plugin.v1.InstallPluginRequest
	(*InstallPluginResponse)(nil),               // 7: io.tkeel.rudder.api.plugin.v1.InstallPluginResponse
	(*UpgradePluginRequest)(nil),                // 8: io.tkeel.rudder.api.plugin.v1.UpgradePluginRequest
	(*UpgradePluginResponse)(nil),               // 9: io.tkeel.rudder.api.plugin.v1.UpgradePluginResponse
	(*UninstallPluginRequest)(nil),              // 10: io.tkeel.rudder.api.plugin.v1.UninstallPluginRequest
	(*UninstallPluginResponse)(nil),             // 11: io.tkeel.rudder.api.plugin.v1.UninstallPluginResponse
	(*GetPluginRequest)(nil),                    // 12: io.tkeel.rudder.api.plugin.v1.GetPluginRequest
	(*GetPluginResponse)(nil),                   // 13: io.tkeel.rudder.api.plugin.v1.GetPluginResponse
	(*ListPluginRequest)(nil),                   // 14: io.tkeel.rudder.api.plugin.v1.ListPluginRequest
	(*ListPluginResponse)(nil),                  // 15: io.tkeel.rudder.api.plugin.v1.ListPluginResponse
	(*TenantEnableRequest)(nil),                 // 16: io.tkeel.rudder.api.plugin.v1.TenantEnableRequest
	(*TenantDisableRequest)(nil),                // 17: io.tkeel.rudder.api.plugin.v1.TenantDisableRequest
	(*ListEnabledTenantsRequest)(nil),           // 18: io.tkeel.rudder.api.plugin.v1.ListEnabledTenantsRequest
	(*ListEnabledTenantsResponse)(nil),          // 19: io.tkeel.rudder.api.plugin.v1.ListEnabledTenantsResponse
	(*TMUpdatePluginIdentifyRequest)(nil),       // 20: io.tkeel.rudder.api.plugin.v1.TMUpdatePluginIdentifyRequest
	(*TMRegisterPluginRequest)(nil),             // 21: io.tkeel.rudder.api.plugin.v1.TMRegisterPluginRequest
	(*InstallerMaintainer)(nil),                 // 22: io.tkeel.rudder.api.plugin.v1.Installer.maintainer
	(*TenantEnableRequest_EnableExtraData)(nil), // 23: io.tkeel.rudder.api.plugin.v1.TenantEnableRequest.EnableExtraData
	(v1.PluginStatus)(0),                        // 24: openapi.v1.PluginStatus
	(*v1.AddonsPoint)(nil),                      // 25: openapi.v1.AddonsPoint
	(*v1.ImplementedPlugin)(nil),                // 26: openapi.v1.ImplementedPlugin
	(*v1.ConsoleEntry)(nil),                     // 27: openapi.v1.ConsoleEntry
	(*emptypb.Empty)(nil),                       // 28: google.protobuf.Empty
}
var file_api_plugin_v1_plugin_proto_depIdxs = []int32{
	0,  // 0: io.tkeel.rudder.api.plugin.v1.Installer.type:type_name -> io.tkeel.rudder.api.plugin.v1.ConfigurationType
	22, // 1: io.tkeel.rudder.api.plugin.v1.Installer.maintainers:type_name -> io.tkeel.rudder.api.plugin.v1.Installer.maintainer
	2,  // 2: io.tkeel.rudder.api.plugin.v1.PluginBrief.installer_brief:type_name -> io.tkeel.rudder.api.plugin.v1.Installer
	24, // 3: io.tkeel.rudder.api.plugin.v1.PluginBrief.status:type_name -> openapi.v1.PluginStatus
	4,  // 4: io.tkeel.rudder.api.plugin.v1.PluginObject.plugin:type_name -> io.tkeel.rudder.api.plugin.v1.PluginBrief
	25, // 5: io.tkeel.rudder.api.plugin.v1.PluginObject.addons_point:type_name -> openapi.v1.AddonsPoint
	26, // 6: io.tkeel.rudder.api.plugin.v1.PluginObject.implemented_plugin:type_name -> openapi.v1.ImplementedPlugin
	3,  // 7: io.tkeel.rudder.api.plugin.v1.PluginObject.enable_tenantes:type_name -> io.tkeel.rudder.api.plugin.v1.EnabledTenant
	1,  // 8: io.tkeel.rudder.api.plugin.v1.PluginObject.register_addons:type_name -> io.tkeel.rudder.api.plugin.v1.RegisterAddons
	27, // 9: io.tkeel.rudder.api.plugin.v1.PluginObject.console_entries:type_name -> openapi.v1.ConsoleEntry
	2,  // 10: io.tkeel.rudder.api.plugin.v1.InstallPluginRequest.installer:type_name -> io.tkeel.rudder.api.plugin.v1.Installer
	5,  // 11: io.tkeel.rudder.api.plugin.v1.InstallPluginResponse.plugin:type_name -> io.tkeel.rudder.api.plugin.v1.PluginObject
	2,  // 12: io.tkeel.rudder.api.plugin.v1.UpgradePluginRequest.installer:type_name -> io.tkeel.rudder.api.plugin.v1.Installer
	5,  // 13: io.tkeel.rudder.api.plugin.v1.UpgradePluginResponse.plugin:type_name -> io.tkeel.rudder.api.plugin.v1.PluginObject
	5,  // 14: io.tkeel.rudder.api.plugin.v1.UninstallPluginResponse.plugin:type_name -> io.tkeel.rudder.api.plugin.v1.PluginObject
	5,  // 15: io.tkeel.rudder.api.plugin.v1.GetPluginResponse.plugin:type_name -> io.tkeel.rudder.api.plugin.v1.PluginObject
	4,  // 16: io.tkeel.rudder.api.plugin.v1.ListPluginResponse.plugin_list:type_name -> io.tkeel.rudder.api.plugin.v1.PluginBrief
	23, // 17: io.tkeel.rudder.api.plugin.v1.TenantEnableRequest.extra:type_name -> io.tkeel.rudder.api.plugin.v1.TenantEnableRequest.EnableExtraData
	3,  // 18: io.tkeel.rudder.api.plugin.v1.ListEnabledTenantsResponse.tenants:type_name -> io.tkeel.rudder.api.plugin.v1.EnabledTenant
	6,  // 19: io.tkeel.rudder.api.plugin.v1.Plugin.InstallPlugin:input_type -> io.tkeel.rudder.api.plugin.v1.InstallPluginRequest
	8,  // 20: io.tkeel.rudder.api.plugin.v1.Plugin.UpgradePlugin:input_type -> io.tkeel.rudder.api.plugin.v1.UpgradePluginRequest
	10, // 21: io.tkeel.rudder.api.plugin.v1.Plugin.UninstallPlugin:input_type -> io.tkeel.rudder.api.plugin.v1.UninstallPluginRequest
	12, // 22: io.tkeel.rudder.api.plugin.v1.Plugin.GetPlugin:input_type -> io.tkeel.rudder.api.plugin.v1.GetPluginRequest
	14, // 23: io.tkeel.rudder.api.plugin.v1.Plugin.ListPlugin:input_type -> io.tkeel.rudder.api.plugin.v1.ListPluginRequest
	16, // 24: io.tkeel.rudder.api.plugin.v1.Plugin.TenantEnable:input_type -> io.tkeel.rudder.api.plugin.v1.TenantEnableRequest
	17, // 25: io.tkeel.rudder.api.plugin.v1.Plugin.TenantDisable:input_type -> io.tkeel.rudder.api.plugin.v1.TenantDisableRequest
	18, // 26: io.tkeel.rudder.api.plugin.v1.Plugin.ListEnabledTenants:input_type -> io.tkeel.rudder.api.plugin.v1.ListEnabledTenantsRequest
	20, // 27: io.tkeel.rudder.api.plugin.v1.Plugin.TMUpdatePluginIdentify:input_type -> io.tkeel.rudder.api.plugin.v1.TMUpdatePluginIdentifyRequest
	21, // 28: io.tkeel.rudder.api.plugin.v1.Plugin.TMRegisterPlugin:input_type -> io.tkeel.rudder.api.plugin.v1.TMRegisterPluginRequest
	7,  // 29: io.tkeel.rudder.api.plugin.v1.Plugin.InstallPlugin:output_type -> io.tkeel.rudder.api.plugin.v1.InstallPluginResponse
	9,  // 30: io.tkeel.rudder.api.plugin.v1.Plugin.UpgradePlugin:output_type -> io.tkeel.rudder.api.plugin.v1.UpgradePluginResponse
	11, // 31: io.tkeel.rudder.api.plugin.v1.Plugin.UninstallPlugin:output_type -> io.tkeel.rudder.api.plugin.v1.UninstallPluginResponse
	13, // 32: io.tkeel.rudder.api.plugin.v1.Plugin.GetPlugin:output_type -> io.tkeel.rudder.api.plugin.v1.GetPluginResponse
	15, // 33: io.tkeel.rudder.api.plugin.v1.Plugin.ListPlugin:output_type -> io.tkeel.rudder.api.plugin.v1.ListPluginResponse
	28, // 34: io.tkeel.rudder.api.plugin.v1.Plugin.TenantEnable:output_type -> google.protobuf.Empty
	28, // 35: io.tkeel.rudder.api.plugin.v1.Plugin.TenantDisable:output_type -> google.protobuf.Empty
	19, // 36: io.tkeel.rudder.api.plugin.v1.Plugin.ListEnabledTenants:output_type -> io.tkeel.rudder.api.plugin.v1.ListEnabledTenantsResponse
	28, // 37: io.tkeel.rudder.api.plugin.v1.Plugin.TMUpdatePluginIdentify:output_type -> google.protobuf.Empty
	28, // 38: io.tkeel.rudder.api.plugin.v1.Plugin.TMRegisterPlugin:output_type -> google.protobuf.Empty
	29, // [29:39] is the sub-list for method output_type
	19, // [19:29] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_api_plugin_v1_plugin_proto_init() }
func file_api_plugin_v1_plugin_proto_init() {
	if File_api_plugin_v1_plugin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_plugin_v1_plugin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAddons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Installer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnabledTenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginBrief); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallPluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallPluginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradePluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradePluginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UninstallPluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UninstallPluginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPluginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPluginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantEnableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantDisableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledTenantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledTenantsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMUpdatePluginIdentifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMRegisterPluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallerMaintainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_plugin_v1_plugin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantEnableRequest_EnableExtraData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_plugin_v1_plugin_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_plugin_v1_plugin_proto_goTypes,
		DependencyIndexes: file_api_plugin_v1_plugin_proto_depIdxs,
		EnumInfos:         file_api_plugin_v1_plugin_proto_enumTypes,
		MessageInfos:      file_api_plugin_v1_plugin_proto_msgTypes,
	}.Build()
	File_api_plugin_v1_plugin_proto = out.File
	file_api_plugin_v1_plugin_proto_rawDesc = nil
	file_api_plugin_v1_plugin_proto_goTypes = nil
	file_api_plugin_v1_plugin_proto_depIdxs = nil
}
