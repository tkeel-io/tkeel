/*
Copyright 2021 The tKeel Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package io.tkeel.rudder.api.plugin.v1;

import "openapi/v1/openapi.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/tkeel-io/tkeel/api/plugin/v1;v1";
option java_multiple_files = true;
option java_package = "io.tkeel.rudder.api.plugin.v1";

service Plugin {
  rpc InstallPlugin(InstallPluginRequest) returns (InstallPluginResponse) {
    option (google.api.http) = {
      post : "/plugins/{id}"
      body : "installer"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "安装插件接口"
      operation_id : "InstallPlugin"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "SUCC"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "404"
          value : {description : "REPOSITORY_OR_INSTALLER_NOT_FOUND"}
        },
        {
          key : "409"
          value : {description : "ALREADY_EXISTS"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_STORE"}
        }
      ]
    };
  };

  rpc UninstallPlugin(UninstallPluginRequest)
      returns (UninstallPluginResponse) {
    option (google.api.http) = {
      delete : "/plugins/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "卸载插件接口"
      operation_id : "UninstallPlugin"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "404"
          value : {description : "PLUGIN_NOT_FOUND"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };

  rpc GetPlugin(GetPluginRequest) returns (GetPluginResponse) {
    option (google.api.http) = {
      get : "/plugins/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "查询插件接口"
      operation_id : "GetPlugin"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "404"
          value : {description : "PLUGIN_NOT_FOUND"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };

  rpc ListPlugin(ListPluginRequest) returns (ListPluginResponse) {
    option (google.api.http) = {
      get : "/plugins"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "获取插件列表接口"
      operation_id : "ListPlugin"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };
  rpc TenantEnable(TenantEnableRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/plugins/{id}/tenants"
      body : "extra"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "插件租户启用接口"
      operation_id : "TenantEnable"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };
  rpc TenantDisable(TenantDisableRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/plugins/{id}/tenants"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "插件租户停用接口"
      operation_id : "TenantDisable"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };
  rpc ListEnabledTenants(ListEnabledTenantsRequest)
      returns (ListEnabledTenantsResponse) {
    option (google.api.http) = {
      get : "/plugins/{id}/tenants"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "获取插件绑定租户接口"
      operation_id : "ListenableTenants"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };
  rpc TMUpdatePluginIdentify(TMUpdatePluginIdentifyRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/tm/plugins/identify"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "获取插件绑定租户接口"
      operation_id : "TMUpdatePluginIdentify"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };
  rpc TMRegisterPlugin(TMRegisterPluginRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/tm/plugins/register"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "手动注册插件接口"
      operation_id : "TMRegisterPlugin"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };
}

/**
 * Register Addons.
 **/
message RegisterAddons {
  string addons = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "addons name"
      } ]; // addons name.
  string upstream = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "upstream path"
      } ]; // upstream path.
}

enum ConfigurationType {
  JSON = 0;
  YAML = 1;
}

/**
 * Installer.
 **/
message Installer {
  string name = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "installer name"
      } ];
  string version = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "installer version"
      } ];
  string repo = 3
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "repository name"
      } ];
  string icon = 4
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "installer icon"
      } ];
  string desc = 5
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "installer desc"
      } ];
  bytes configuration = 6
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "installer configuration data"
      } ];
  ConfigurationType type = 7
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "configuration type"
      } ];
  message maintainer {
    string name = 1
        [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          description : "maintainer name"
        } ];
    string email = 2
        [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          description : "maintainer email"
        } ];
    string url = 3
        [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          description : "maintainer url"
        } ];
  }
  repeated maintainer maintainers = 8
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "installer maintainers"
      } ];
}

/**
 * EnabledTenant object.
 **/

message EnabledTenant {
  string title = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "enable tenant title"
      } ];
  string remark = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "enable tenant remark"
      } ];
  string tenant_id = 3
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "enable tenant id"
      } ]; // enable tenant id.
  string operator_id = 4
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "operator user id"
      } ]; // operator user id.
  int64 enable_timestamp = 5
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "enable timestamp"
      } ]; // enable timestamp.
  int32 user_num = 6
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "enable tenant user number"
      } ];
}

// plugin brief

message PluginBrief {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ]; // plugin id.
  string version = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin version"
      } ]; // plugin version
  int64 register_timestamp = 3
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "register timestamp"
      } ]; // register timestamp.
  string tkeel_version = 4
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin depend tkeel version"
      } ]; // plugin depend tkeel version.
  Installer installer_brief = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "brief installer info only has name,verison,repo_name and "
                    "installed field."
    }
  ]; // register plugin status
  bool tenant_enable = 6
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "tenant enable"
      } ]; // tenant enable.
  openapi.v1.PluginStatus status = 7
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "register plugin status"
      } ]; // register plugin status.
}

/**
 * plugin object.
 **/
message PluginObject {
  PluginBrief plugin = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin brief info"
      } ]; // plugin brief info.
  repeated openapi.v1.AddonsPoint addons_point = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin declares addons"
      } ]; // plugin declares addons.
  repeated openapi.v1.ImplementedPlugin implemented_plugin = 3
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin implemented plugin list"
      } ]; // plugin implemented plugin list.
  string secret = 4
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin registered secret"
      } ]; // plugin registered secret.
  repeated EnabledTenant enable_tenantes = 5
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "enable tenant's id list"
      } ]; // enable tenant's id list.
  repeated RegisterAddons register_addons = 6
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "register addons router"
      } ]; // register addons router.
  repeated openapi.v1.ConsoleEntry console_entries = 7
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin console entries"
      } ];
}

message InstallPluginRequest {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "install plugin id"
      } ];
  Installer installer = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "installer info"
      } ];
}

message InstallPluginResponse {
  PluginObject plugin = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin object"
      } ];
}

message UninstallPluginRequest {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ];
}
message UninstallPluginResponse {
  PluginObject plugin = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin object"
      } ];
}

message GetPluginRequest {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ];
}
message GetPluginResponse {
  PluginObject plugin = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin object"
      } ];
}

message ListPluginRequest {
  int32 page_num = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "query page number"
      } ];
  int32 page_size = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "query page size"
      } ];
  string order_by = 3
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "query items order by field"
      } ];
  bool is_descending = 4
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "query items inverted sort"
      } ];
  string key_words = 5
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "query items key"
      } ];
  bool display_all_plugin = 10
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "return all plugin"
      } ];
}

message ListPluginResponse {
  int32 total = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "total items"
      } ];
  int32 page_num = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "query page number"
      } ];
  int32 page_size = 3
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "query page size"
      } ];
  repeated PluginBrief plugin_list = 10
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin object list"
      } ];
  int32 enable_num = 11
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "enable plugin number"
      } ];
}

message TenantEnableRequest {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ];
  message EnableExtraData {
    string desc = 1
        [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          description : "extra data"
        } ];
    bytes extra = 2
        [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          description : "extra data"
        } ];
  }
  EnableExtraData extra = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "extra data"
      } ];
}

message TenantDisableRequest {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ];
  bytes extra = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "extra data"
      } ];
}

message ListEnabledTenantsRequest {
  int32 page_num = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "query page number"
      } ];
  int32 page_size = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "query page size"
      } ];
  string order_by = 3
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "query items order by field"
      } ];
  bool is_descending = 4
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "query items inverted sort"
      } ];
  string key_words = 5
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "query items key"
      } ];
  string id = 10
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ];
}

message ListEnabledTenantsResponse {
  int32 total = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "total items"
      } ];
  int32 page_num = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "query page number"
      } ];
  int32 page_size = 3
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "query page size"
      } ];
  repeated EnabledTenant tenants = 10
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin enable tenants list"
      } ];
}

message TMUpdatePluginIdentifyRequest { string id = 1; }

message TMRegisterPluginRequest { string id = 1; }