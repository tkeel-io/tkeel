/*
Copyright 2021 The tKeel Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package api.plugin.v1;

import "openapi/v1/openapi.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/tkeel-io/tkeel/api/plugin/v1;v1";
option java_multiple_files = true;
option java_package = "api.plugin.v1";

service Plugin {
  rpc InstallPlugin(InstallPluginRequest) returns (InstallPluginResponse) {
    option (google.api.http) = {
      post : "/plugins/{id}"
      body : "installer_info"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "安装插件接口"
      operation_id : "InstallPlugin"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "SUCC"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "404"
          value : {description : "REPOSITORY_OR_INSTALLER_NOT_FOUND"}
        },
        {
          key : "409"
          value : {description : "ALREADY_EXISTS"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_STORE"}
        }
      ]
    };
  };

  rpc UninstallPlugin(UninstallPluginRequest)
      returns (UninstallPluginResponse) {
    option (google.api.http) = {
      delete : "/plugins/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "卸载插件接口"
      operation_id : "UninstallPlugin"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "404"
          value : {description : "PLUGIN_NOT_FOUND"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };

  rpc RegisterPlugin(RegisterPluginRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/plugins/{id}/register"
      body : "secret"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "注册插件接口"
      operation_id : "RegisterPlugin"
      tags : "Plugin"
      responses : [
        {
          key : "204"
          value : {description : "SUCC_AND_NO_CONTENT"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "404"
          value : {description : "PLUGIN_NOT_FOUND"}
        },
        {
          key : "409"
          value : {description : "ALREADY_EXISTS"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_QUERY_PLUGIN_OPENAPI"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_STORE"}
        }
      ]
    };
  };

  rpc UnregisterPlugin(UnregisterPluginRequest)
      returns (UnregisterPluginResponse) {
    option (google.api.http) = {
      delete : "/plugins/{id}/register"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "注销插件接口"
      operation_id : "UnregisterPlugin"
      tags : "Plugin"
      responses : [
        {
          key : "204"
          value : {description : "SUCC_AND_NO_CONTENT"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "404"
          value : {description : "PLUGIN_NOT_FOUND"}
        },
        {
          key : "500"
          value : {description : "UNREGISTER_PLUGIN_HAS_BEEN_DEPENDED"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_STORE"}
        }
      ]
    };
  };

  rpc GetPlugin(GetPluginRequest) returns (GetPluginResponse) {
    option (google.api.http) = {
      get : "/plugins/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "查询插件接口"
      operation_id : "GetPlugin"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "404"
          value : {description : "PLUGIN_NOT_FOUND"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };

  rpc ListPlugin(google.protobuf.Empty) returns (ListPluginResponse) {
    option (google.api.http) = {
      get : "/plugins"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "获取插件列表接口"
      operation_id : "ListPlugin"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };
  rpc BindTenants(BindTenantsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/plugins/{id}/tenants"
      body : "extra"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "插件绑定租户接口"
      operation_id : "BindTenants"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };
  rpc UnbindTenants(UnbindTenantsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/plugins/{id}/tenants"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "插件绑定租户接口"
      operation_id : "UnindTenants"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };
  rpc ListBindTenants(ListBindTenantsRequest)
      returns (ListBindTenantsResponse) {
    option (google.api.http) = {
      get : "/plugins/{id}/tenants"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "获取插件绑定租户接口"
      operation_id : "ListBindTenants"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };
}

/**
 * Register Addons.
 **/
message RegisterAddons {
  string addons = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "addons name"
      } ]; // addons name.
  string upstream = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "upstream path"
      } ]; // upstream path.
}

/**
 * Secret.
 **/
message Secret {
  string data = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin registered secret data"
      } ];
}

enum ConfigurationType {
  JSON = 0;
  YAML = 1;
}

/**
 * Installer.
 **/
message Installer {
  string name = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "installer name"
      } ];
  string version = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "installer version"
      } ];
  string repo_name = 3
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "repository name"
      } ];
  bytes configuration = 4
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "installer configuration data"
      } ];
  ConfigurationType type = 5
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "configuration type"
      } ];
}

/**
 * plugin object.
 **/
message PluginObject {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ]; // plugin id.
  string plugin_version = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin version"
      } ]; // plugin version.
  string tkeel_version = 3
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin depend tkeel version"
      } ]; // plugin depend tkeel version.
  repeated openapi.v1.AddonsPoint addons_point = 4
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin declares addons"
      } ]; // plugin declares addons.
  repeated openapi.v1.ImplementedPlugin implemented_plugin = 5
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin implemented plugin list"
      } ]; // plugin implemented plugin list.
  Secret secret = 6
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin registered secret"
      } ]; // plugin registered secret.
  int64 register_timestamp = 7
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "register timestamp"
      } ]; // register timestamp.
  repeated string active_tenantes = 8
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "active tenant's id list"
      } ]; // active tenant's id list.
  repeated RegisterAddons register_addons = 9
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "register addons router"
      } ]; // register addons router.
  openapi.v1.PluginStatus status = 10
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "register plugin status"
      } ]; // register plugin status.
  Installer brief_installer_info = 11 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "brief installer info only has name,verison,repo_name and "
                    "installed field."
    }
  ]; // register plugin status.
  repeated openapi.v1.ConsoleEntry console_entries = 12
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin console entries"
      } ];
}

message InstallPluginRequest {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "install plugin id"
      } ];
  Installer installer_info = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "installer info"
      } ];
}

message InstallPluginResponse {
  PluginObject plugin = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin object"
      } ];
}

message UninstallPluginRequest {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ];
}
message UninstallPluginResponse {
  PluginObject plugin = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin object"
      } ];
}

message UnregisterPluginRequest {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ];
}
message UnregisterPluginResponse {
  PluginObject plugin = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin object"
      } ];
}

message RegisterPluginRequest {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ];
  Secret secret = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin register secret"
      } ];
}

message GetPluginRequest {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ];
}
message GetPluginResponse {
  PluginObject plugin = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin object"
      } ];
}

message ListPluginResponse {
  repeated PluginObject plugin_list = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin object list"
      } ];
}

message BindTenantsRequest {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ];
  string extra = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "extra data"
      } ];
}

message UnbindTenantsRequest {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ];
}

message ListBindTenantsRequest {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ];
}

message ListBindTenantsResponse {
  repeated string tenants = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin bind tenants list"
      } ];
}