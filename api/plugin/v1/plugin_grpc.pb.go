// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginClient is the client API for Plugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginClient interface {
	InstallPlugin(ctx context.Context, in *InstallPluginRequest, opts ...grpc.CallOption) (*InstallPluginResponse, error)
	UninstallPlugin(ctx context.Context, in *UninstallPluginRequest, opts ...grpc.CallOption) (*UninstallPluginResponse, error)
	RegisterPlugin(ctx context.Context, in *RegisterPluginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnregisterPlugin(ctx context.Context, in *UnregisterPluginRequest, opts ...grpc.CallOption) (*UnregisterPluginResponse, error)
	GetPlugin(ctx context.Context, in *GetPluginRequest, opts ...grpc.CallOption) (*GetPluginResponse, error)
	ListPlugin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPluginResponse, error)
	BindTenants(ctx context.Context, in *BindTenantsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnbindTenants(ctx context.Context, in *UnbindTenantsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListBindTenants(ctx context.Context, in *ListBindTenantsRequest, opts ...grpc.CallOption) (*ListBindTenantsResponse, error)
}

type pluginClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginClient(cc grpc.ClientConnInterface) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) InstallPlugin(ctx context.Context, in *InstallPluginRequest, opts ...grpc.CallOption) (*InstallPluginResponse, error) {
	out := new(InstallPluginResponse)
	err := c.cc.Invoke(ctx, "/api.plugin.v1.Plugin/InstallPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) UninstallPlugin(ctx context.Context, in *UninstallPluginRequest, opts ...grpc.CallOption) (*UninstallPluginResponse, error) {
	out := new(UninstallPluginResponse)
	err := c.cc.Invoke(ctx, "/api.plugin.v1.Plugin/UninstallPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) RegisterPlugin(ctx context.Context, in *RegisterPluginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.plugin.v1.Plugin/RegisterPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) UnregisterPlugin(ctx context.Context, in *UnregisterPluginRequest, opts ...grpc.CallOption) (*UnregisterPluginResponse, error) {
	out := new(UnregisterPluginResponse)
	err := c.cc.Invoke(ctx, "/api.plugin.v1.Plugin/UnregisterPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) GetPlugin(ctx context.Context, in *GetPluginRequest, opts ...grpc.CallOption) (*GetPluginResponse, error) {
	out := new(GetPluginResponse)
	err := c.cc.Invoke(ctx, "/api.plugin.v1.Plugin/GetPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) ListPlugin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPluginResponse, error) {
	out := new(ListPluginResponse)
	err := c.cc.Invoke(ctx, "/api.plugin.v1.Plugin/ListPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) BindTenants(ctx context.Context, in *BindTenantsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.plugin.v1.Plugin/BindTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) UnbindTenants(ctx context.Context, in *UnbindTenantsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.plugin.v1.Plugin/UnbindTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) ListBindTenants(ctx context.Context, in *ListBindTenantsRequest, opts ...grpc.CallOption) (*ListBindTenantsResponse, error) {
	out := new(ListBindTenantsResponse)
	err := c.cc.Invoke(ctx, "/api.plugin.v1.Plugin/ListBindTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServer is the server API for Plugin service.
// All implementations must embed UnimplementedPluginServer
// for forward compatibility
type PluginServer interface {
	InstallPlugin(context.Context, *InstallPluginRequest) (*InstallPluginResponse, error)
	UninstallPlugin(context.Context, *UninstallPluginRequest) (*UninstallPluginResponse, error)
	RegisterPlugin(context.Context, *RegisterPluginRequest) (*emptypb.Empty, error)
	UnregisterPlugin(context.Context, *UnregisterPluginRequest) (*UnregisterPluginResponse, error)
	GetPlugin(context.Context, *GetPluginRequest) (*GetPluginResponse, error)
	ListPlugin(context.Context, *emptypb.Empty) (*ListPluginResponse, error)
	BindTenants(context.Context, *BindTenantsRequest) (*emptypb.Empty, error)
	UnbindTenants(context.Context, *UnbindTenantsRequest) (*emptypb.Empty, error)
	ListBindTenants(context.Context, *ListBindTenantsRequest) (*ListBindTenantsResponse, error)
	mustEmbedUnimplementedPluginServer()
}

// UnimplementedPluginServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServer struct {
}

func (UnimplementedPluginServer) InstallPlugin(context.Context, *InstallPluginRequest) (*InstallPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallPlugin not implemented")
}
func (UnimplementedPluginServer) UninstallPlugin(context.Context, *UninstallPluginRequest) (*UninstallPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallPlugin not implemented")
}
func (UnimplementedPluginServer) RegisterPlugin(context.Context, *RegisterPluginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPlugin not implemented")
}
func (UnimplementedPluginServer) UnregisterPlugin(context.Context, *UnregisterPluginRequest) (*UnregisterPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterPlugin not implemented")
}
func (UnimplementedPluginServer) GetPlugin(context.Context, *GetPluginRequest) (*GetPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlugin not implemented")
}
func (UnimplementedPluginServer) ListPlugin(context.Context, *emptypb.Empty) (*ListPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlugin not implemented")
}
func (UnimplementedPluginServer) BindTenants(context.Context, *BindTenantsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindTenants not implemented")
}
func (UnimplementedPluginServer) UnbindTenants(context.Context, *UnbindTenantsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindTenants not implemented")
}
func (UnimplementedPluginServer) ListBindTenants(context.Context, *ListBindTenantsRequest) (*ListBindTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBindTenants not implemented")
}
func (UnimplementedPluginServer) mustEmbedUnimplementedPluginServer() {}

// UnsafePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServer will
// result in compilation errors.
type UnsafePluginServer interface {
	mustEmbedUnimplementedPluginServer()
}

func RegisterPluginServer(s grpc.ServiceRegistrar, srv PluginServer) {
	s.RegisterService(&Plugin_ServiceDesc, srv)
}

func _Plugin_InstallPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).InstallPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.plugin.v1.Plugin/InstallPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).InstallPlugin(ctx, req.(*InstallPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_UninstallPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).UninstallPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.plugin.v1.Plugin/UninstallPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).UninstallPlugin(ctx, req.(*UninstallPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_RegisterPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).RegisterPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.plugin.v1.Plugin/RegisterPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).RegisterPlugin(ctx, req.(*RegisterPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_UnregisterPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).UnregisterPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.plugin.v1.Plugin/UnregisterPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).UnregisterPlugin(ctx, req.(*UnregisterPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_GetPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).GetPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.plugin.v1.Plugin/GetPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).GetPlugin(ctx, req.(*GetPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_ListPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).ListPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.plugin.v1.Plugin/ListPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).ListPlugin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_BindTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).BindTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.plugin.v1.Plugin/BindTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).BindTenants(ctx, req.(*BindTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_UnbindTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).UnbindTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.plugin.v1.Plugin/UnbindTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).UnbindTenants(ctx, req.(*UnbindTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_ListBindTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBindTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).ListBindTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.plugin.v1.Plugin/ListBindTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).ListBindTenants(ctx, req.(*ListBindTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Plugin_ServiceDesc is the grpc.ServiceDesc for Plugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.plugin.v1.Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallPlugin",
			Handler:    _Plugin_InstallPlugin_Handler,
		},
		{
			MethodName: "UninstallPlugin",
			Handler:    _Plugin_UninstallPlugin_Handler,
		},
		{
			MethodName: "RegisterPlugin",
			Handler:    _Plugin_RegisterPlugin_Handler,
		},
		{
			MethodName: "UnregisterPlugin",
			Handler:    _Plugin_UnregisterPlugin_Handler,
		},
		{
			MethodName: "GetPlugin",
			Handler:    _Plugin_GetPlugin_Handler,
		},
		{
			MethodName: "ListPlugin",
			Handler:    _Plugin_ListPlugin_Handler,
		},
		{
			MethodName: "BindTenants",
			Handler:    _Plugin_BindTenants_Handler,
		},
		{
			MethodName: "UnbindTenants",
			Handler:    _Plugin_UnbindTenants_Handler,
		},
		{
			MethodName: "ListBindTenants",
			Handler:    _Plugin_ListBindTenants_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/plugin/v1/plugin.proto",
}
