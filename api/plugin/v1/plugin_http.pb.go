// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http 0.1.0

package v1

import (
	context "context"
	json "encoding/json"
	go_restful "github.com/emicklei/go-restful"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
)

import transportHTTP "github.com/tkeel-io/kit/transport/http"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the tkeel package it is being compiled against.
// import package.context.http.go_restful.json.

const _ = transportHTTP.ImportAndUsed

type PluginHTTPServer interface {
	DeletePlugin(context.Context, *DeletePluginRequest) (*DeletePluginResponse, error)
	GetPlugin(context.Context, *GetPluginRequest) (*GetPluginResponse, error)
	ListPlugin(context.Context, *emptypb.Empty) (*ListPluginResponse, error)
	RegisterPlugin(context.Context, *RegisterPluginRequest) (*RegisterPluginResponse, error)
}

type PluginHTTPHandler struct {
	srv PluginHTTPServer
}

func newPluginHTTPHandler(s PluginHTTPServer) *PluginHTTPHandler {
	return &PluginHTTPHandler{srv: s}
}

func (h *PluginHTTPHandler) DeletePlugin(req *go_restful.Request, resp *go_restful.Response) {
	in := DeletePluginRequest{}
	if err := transportHTTP.GetPathValue(req, &in); err != nil {
		resp.WriteErrorString(http.StatusBadRequest, err.Error())
		return
	}

	out, err := h.srv.DeletePlugin(req.Request.Context(), &in)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}

	result, err := json.Marshal(out)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
	_, err = resp.Write(result)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
}

func (h *PluginHTTPHandler) GetPlugin(req *go_restful.Request, resp *go_restful.Response) {
	in := GetPluginRequest{}
	if err := transportHTTP.GetPathValue(req, &in); err != nil {
		resp.WriteErrorString(http.StatusBadRequest, err.Error())
		return
	}

	out, err := h.srv.GetPlugin(req.Request.Context(), &in)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}

	result, err := json.Marshal(out)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
	_, err = resp.Write(result)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
}

func (h *PluginHTTPHandler) ListPlugin(req *go_restful.Request, resp *go_restful.Response) {
	in := emptypb.Empty{}

	out, err := h.srv.ListPlugin(req.Request.Context(), &in)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}

	result, err := json.Marshal(out)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
	_, err = resp.Write(result)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
}

func (h *PluginHTTPHandler) RegisterPlugin(req *go_restful.Request, resp *go_restful.Response) {
	in := RegisterPluginRequest{}
	if err := transportHTTP.GetBody(req, &in); err != nil {
		resp.WriteErrorString(http.StatusBadRequest, err.Error())
		return
	}

	out, err := h.srv.RegisterPlugin(req.Request.Context(), &in)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}

	result, err := json.Marshal(out)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
	_, err = resp.Write(result)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
}

func RegisterPluginHTTPServer(container *go_restful.Container, srv PluginHTTPServer) {
	var ws *go_restful.WebService
	for _, v := range container.RegisteredWebServices() {
		if v.RootPath() == "/v1" {
			ws = v
			break
		}
	}
	if ws == nil {
		ws = new(go_restful.WebService)
		ws.ApiVersion("/v1")
		ws.Path("/v1").Produces(go_restful.MIME_JSON)
		container.Add(ws)
	}

	handler := newPluginHTTPHandler(srv)
	ws.Route(ws.POST("/plugins").
		To(handler.RegisterPlugin))
	ws.Route(ws.DELETE("/plugins/{id}").
		To(handler.DeletePlugin))
	ws.Route(ws.GET("/plugins/{id}").
		To(handler.GetPlugin))
	ws.Route(ws.GET("/plugins").
		To(handler.ListPlugin))
}
