// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http 0.1.0

package v1

import (
	context "context"
	go_restful "github.com/emicklei/go-restful"
	errors "github.com/tkeel-io/kit/errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
)

import transportHTTP "github.com/tkeel-io/kit/transport/http"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the tkeel package it is being compiled against.
// import package.context.http.go_restful.errors.emptypb.

type PluginHTTPServer interface {
	BindTenants(context.Context, *BindTenantsRequest) (*emptypb.Empty, error)
	GetPlugin(context.Context, *GetPluginRequest) (*GetPluginResponse, error)
	InstallPlugin(context.Context, *InstallPluginRequest) (*InstallPluginResponse, error)
	ListBindTenants(context.Context, *ListBindTenantsRequest) (*ListBindTenantsResponse, error)
	ListPlugin(context.Context, *emptypb.Empty) (*ListPluginResponse, error)
	RegisterPlugin(context.Context, *RegisterPluginRequest) (*emptypb.Empty, error)
	UnbindTenants(context.Context, *UnbindTenantsRequest) (*emptypb.Empty, error)
	UninstallPlugin(context.Context, *UninstallPluginRequest) (*UninstallPluginResponse, error)
	UnregisterPlugin(context.Context, *UnregisterPluginRequest) (*UnregisterPluginResponse, error)
}

type PluginHTTPHandler struct {
	srv PluginHTTPServer
}

func newPluginHTTPHandler(s PluginHTTPServer) *PluginHTTPHandler {
	return &PluginHTTPHandler{srv: s}
}

func setResult(code int, msg string, data interface{}) map[string]interface{} {
	return map[string]interface{}{
		"code": code,
		"msg":  msg,
		"data": data,
	}
}

func (h *PluginHTTPHandler) BindTenants(req *go_restful.Request, resp *go_restful.Response) {
	in := BindTenantsRequest{}
	if err := transportHTTP.GetBody(req, &in.Extra); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}
	if err := transportHTTP.GetQuery(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}
	if err := transportHTTP.GetPathValue(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}

	ctx := transportHTTP.ContextWithHeader(req.Request.Context(), req.Request.Header)

	out, err := h.srv.BindTenants(ctx, &in)
	if err != nil {
		tErr := errors.FromError(err)
		httpCode := errors.GRPCToHTTPStatusCode(tErr.GRPCStatus().Code())
		resp.WriteHeaderAndJson(httpCode,
			setResult(httpCode, tErr.Message, out), "application/json")
		return
	}

	resp.WriteHeaderAndJson(http.StatusOK,
		setResult(http.StatusOK, "", out), "application/json")
}

func (h *PluginHTTPHandler) GetPlugin(req *go_restful.Request, resp *go_restful.Response) {
	in := GetPluginRequest{}
	if err := transportHTTP.GetQuery(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}
	if err := transportHTTP.GetPathValue(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}

	ctx := transportHTTP.ContextWithHeader(req.Request.Context(), req.Request.Header)

	out, err := h.srv.GetPlugin(ctx, &in)
	if err != nil {
		tErr := errors.FromError(err)
		httpCode := errors.GRPCToHTTPStatusCode(tErr.GRPCStatus().Code())
		resp.WriteHeaderAndJson(httpCode,
			setResult(httpCode, tErr.Message, out), "application/json")
		return
	}

	resp.WriteHeaderAndJson(http.StatusOK,
		setResult(http.StatusOK, "", out), "application/json")
}

func (h *PluginHTTPHandler) InstallPlugin(req *go_restful.Request, resp *go_restful.Response) {
	in := InstallPluginRequest{}
	if err := transportHTTP.GetBody(req, &in.InstallerInfo); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}
	if err := transportHTTP.GetQuery(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}
	if err := transportHTTP.GetPathValue(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}

	ctx := transportHTTP.ContextWithHeader(req.Request.Context(), req.Request.Header)

	out, err := h.srv.InstallPlugin(ctx, &in)
	if err != nil {
		tErr := errors.FromError(err)
		httpCode := errors.GRPCToHTTPStatusCode(tErr.GRPCStatus().Code())
		resp.WriteHeaderAndJson(httpCode,
			setResult(httpCode, tErr.Message, out), "application/json")
		return
	}

	resp.WriteHeaderAndJson(http.StatusOK,
		setResult(http.StatusOK, "", out), "application/json")
}

func (h *PluginHTTPHandler) ListBindTenants(req *go_restful.Request, resp *go_restful.Response) {
	in := ListBindTenantsRequest{}
	if err := transportHTTP.GetQuery(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}
	if err := transportHTTP.GetPathValue(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}

	ctx := transportHTTP.ContextWithHeader(req.Request.Context(), req.Request.Header)

	out, err := h.srv.ListBindTenants(ctx, &in)
	if err != nil {
		tErr := errors.FromError(err)
		httpCode := errors.GRPCToHTTPStatusCode(tErr.GRPCStatus().Code())
		resp.WriteHeaderAndJson(httpCode,
			setResult(httpCode, tErr.Message, out), "application/json")
		return
	}

	resp.WriteHeaderAndJson(http.StatusOK,
		setResult(http.StatusOK, "", out), "application/json")
}

func (h *PluginHTTPHandler) ListPlugin(req *go_restful.Request, resp *go_restful.Response) {
	in := emptypb.Empty{}
	if err := transportHTTP.GetQuery(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}

	ctx := transportHTTP.ContextWithHeader(req.Request.Context(), req.Request.Header)

	out, err := h.srv.ListPlugin(ctx, &in)
	if err != nil {
		tErr := errors.FromError(err)
		httpCode := errors.GRPCToHTTPStatusCode(tErr.GRPCStatus().Code())
		resp.WriteHeaderAndJson(httpCode,
			setResult(httpCode, tErr.Message, out), "application/json")
		return
	}

	resp.WriteHeaderAndJson(http.StatusOK,
		setResult(http.StatusOK, "", out), "application/json")
}

func (h *PluginHTTPHandler) RegisterPlugin(req *go_restful.Request, resp *go_restful.Response) {
	in := RegisterPluginRequest{}
	if err := transportHTTP.GetBody(req, &in.Secret); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}
	if err := transportHTTP.GetQuery(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}
	if err := transportHTTP.GetPathValue(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}

	ctx := transportHTTP.ContextWithHeader(req.Request.Context(), req.Request.Header)

	out, err := h.srv.RegisterPlugin(ctx, &in)
	if err != nil {
		tErr := errors.FromError(err)
		httpCode := errors.GRPCToHTTPStatusCode(tErr.GRPCStatus().Code())
		resp.WriteHeaderAndJson(httpCode,
			setResult(httpCode, tErr.Message, out), "application/json")
		return
	}

	resp.WriteHeaderAndJson(http.StatusOK,
		setResult(http.StatusOK, "", out), "application/json")
}

func (h *PluginHTTPHandler) UnbindTenants(req *go_restful.Request, resp *go_restful.Response) {
	in := UnbindTenantsRequest{}
	if err := transportHTTP.GetQuery(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}
	if err := transportHTTP.GetPathValue(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}

	ctx := transportHTTP.ContextWithHeader(req.Request.Context(), req.Request.Header)

	out, err := h.srv.UnbindTenants(ctx, &in)
	if err != nil {
		tErr := errors.FromError(err)
		httpCode := errors.GRPCToHTTPStatusCode(tErr.GRPCStatus().Code())
		resp.WriteHeaderAndJson(httpCode,
			setResult(httpCode, tErr.Message, out), "application/json")
		return
	}

	resp.WriteHeaderAndJson(http.StatusOK,
		setResult(http.StatusOK, "", out), "application/json")
}

func (h *PluginHTTPHandler) UninstallPlugin(req *go_restful.Request, resp *go_restful.Response) {
	in := UninstallPluginRequest{}
	if err := transportHTTP.GetQuery(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}
	if err := transportHTTP.GetPathValue(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}

	ctx := transportHTTP.ContextWithHeader(req.Request.Context(), req.Request.Header)

	out, err := h.srv.UninstallPlugin(ctx, &in)
	if err != nil {
		tErr := errors.FromError(err)
		httpCode := errors.GRPCToHTTPStatusCode(tErr.GRPCStatus().Code())
		resp.WriteHeaderAndJson(httpCode,
			setResult(httpCode, tErr.Message, out), "application/json")
		return
	}

	resp.WriteHeaderAndJson(http.StatusOK,
		setResult(http.StatusOK, "", out), "application/json")
}

func (h *PluginHTTPHandler) UnregisterPlugin(req *go_restful.Request, resp *go_restful.Response) {
	in := UnregisterPluginRequest{}
	if err := transportHTTP.GetQuery(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}
	if err := transportHTTP.GetPathValue(req, &in); err != nil {
		resp.WriteHeaderAndJson(http.StatusBadRequest,
			setResult(http.StatusBadRequest, err.Error(), nil), "application/json")
		return
	}

	ctx := transportHTTP.ContextWithHeader(req.Request.Context(), req.Request.Header)

	out, err := h.srv.UnregisterPlugin(ctx, &in)
	if err != nil {
		tErr := errors.FromError(err)
		httpCode := errors.GRPCToHTTPStatusCode(tErr.GRPCStatus().Code())
		resp.WriteHeaderAndJson(httpCode,
			setResult(httpCode, tErr.Message, out), "application/json")
		return
	}

	resp.WriteHeaderAndJson(http.StatusOK,
		setResult(http.StatusOK, "", out), "application/json")
}

func RegisterPluginHTTPServer(container *go_restful.Container, srv PluginHTTPServer) {
	var ws *go_restful.WebService
	for _, v := range container.RegisteredWebServices() {
		if v.RootPath() == "/v1" {
			ws = v
			break
		}
	}
	if ws == nil {
		ws = new(go_restful.WebService)
		ws.ApiVersion("/v1")
		ws.Path("/v1").Produces(go_restful.MIME_JSON)
		container.Add(ws)
	}

	handler := newPluginHTTPHandler(srv)
	ws.Route(ws.POST("/plugins/{id}").
		To(handler.InstallPlugin))
	ws.Route(ws.DELETE("/plugins/{id}").
		To(handler.UninstallPlugin))
	ws.Route(ws.POST("/plugins/{id}/register").
		To(handler.RegisterPlugin))
	ws.Route(ws.DELETE("/plugins/{id}/register").
		To(handler.UnregisterPlugin))
	ws.Route(ws.GET("/plugins/{id}").
		To(handler.GetPlugin))
	ws.Route(ws.GET("/plugins").
		To(handler.ListPlugin))
	ws.Route(ws.POST("/plugins/{id}/tenants").
		To(handler.BindTenants))
	ws.Route(ws.DELETE("/plugins/{id}/tenants").
		To(handler.UnbindTenants))
	ws.Route(ws.GET("/plugins/{id}/tenants").
		To(handler.ListBindTenants))
}
