// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RBACClient is the client API for RBAC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RBACClient interface {
	CreateRoles(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	ListRole(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	UpdateUserRoleBinding(ctx context.Context, in *UpdateUserRoleBindingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateRoleBinding(ctx context.Context, in *CreateRoleBindingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRoleBinding(ctx context.Context, in *DeleteRoleBindingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListPermissions(ctx context.Context, in *ListPermissionRequest, opts ...grpc.CallOption) (*ListPermissionResponse, error)
	CheckRolePermission(ctx context.Context, in *CheckRolePermissionRequest, opts ...grpc.CallOption) (*CheckRolePermissionResponse, error)
	TMAddPolicy(ctx context.Context, in *TMPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TMDeletePolicy(ctx context.Context, in *TMPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TMAddRoleBinding(ctx context.Context, in *TMRoleBindingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TMDeleteRoleBinding(ctx context.Context, in *TMRoleBindingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rBACClient struct {
	cc grpc.ClientConnInterface
}

func NewRBACClient(cc grpc.ClientConnInterface) RBACClient {
	return &rBACClient{cc}
}

func (c *rBACClient) CreateRoles(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.rbac.v1.RBAC/CreateRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) ListRole(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.rbac.v1.RBAC/ListRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.rbac.v1.RBAC/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.rbac.v1.RBAC/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.rbac.v1.RBAC/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) UpdateUserRoleBinding(ctx context.Context, in *UpdateUserRoleBindingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.rbac.v1.RBAC/UpdateUserRoleBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) CreateRoleBinding(ctx context.Context, in *CreateRoleBindingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.rbac.v1.RBAC/CreateRoleBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) DeleteRoleBinding(ctx context.Context, in *DeleteRoleBindingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.rbac.v1.RBAC/DeleteRoleBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) ListPermissions(ctx context.Context, in *ListPermissionRequest, opts ...grpc.CallOption) (*ListPermissionResponse, error) {
	out := new(ListPermissionResponse)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.rbac.v1.RBAC/ListPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) CheckRolePermission(ctx context.Context, in *CheckRolePermissionRequest, opts ...grpc.CallOption) (*CheckRolePermissionResponse, error) {
	out := new(CheckRolePermissionResponse)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.rbac.v1.RBAC/CheckRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) TMAddPolicy(ctx context.Context, in *TMPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.rbac.v1.RBAC/TMAddPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) TMDeletePolicy(ctx context.Context, in *TMPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.rbac.v1.RBAC/TMDeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) TMAddRoleBinding(ctx context.Context, in *TMRoleBindingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.rbac.v1.RBAC/TMAddRoleBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) TMDeleteRoleBinding(ctx context.Context, in *TMRoleBindingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.tkeel.rudder.api.rbac.v1.RBAC/TMDeleteRoleBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RBACServer is the server API for RBAC service.
// All implementations must embed UnimplementedRBACServer
// for forward compatibility
type RBACServer interface {
	CreateRoles(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	ListRole(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	UpdateUserRoleBinding(context.Context, *UpdateUserRoleBindingRequest) (*emptypb.Empty, error)
	CreateRoleBinding(context.Context, *CreateRoleBindingRequest) (*emptypb.Empty, error)
	DeleteRoleBinding(context.Context, *DeleteRoleBindingRequest) (*emptypb.Empty, error)
	ListPermissions(context.Context, *ListPermissionRequest) (*ListPermissionResponse, error)
	CheckRolePermission(context.Context, *CheckRolePermissionRequest) (*CheckRolePermissionResponse, error)
	TMAddPolicy(context.Context, *TMPolicyRequest) (*emptypb.Empty, error)
	TMDeletePolicy(context.Context, *TMPolicyRequest) (*emptypb.Empty, error)
	TMAddRoleBinding(context.Context, *TMRoleBindingRequest) (*emptypb.Empty, error)
	TMDeleteRoleBinding(context.Context, *TMRoleBindingRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRBACServer()
}

// UnimplementedRBACServer must be embedded to have forward compatible implementations.
type UnimplementedRBACServer struct {
}

func (UnimplementedRBACServer) CreateRoles(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoles not implemented")
}
func (UnimplementedRBACServer) ListRole(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRole not implemented")
}
func (UnimplementedRBACServer) GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedRBACServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRBACServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRBACServer) UpdateUserRoleBinding(context.Context, *UpdateUserRoleBindingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRoleBinding not implemented")
}
func (UnimplementedRBACServer) CreateRoleBinding(context.Context, *CreateRoleBindingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleBinding not implemented")
}
func (UnimplementedRBACServer) DeleteRoleBinding(context.Context, *DeleteRoleBindingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleBinding not implemented")
}
func (UnimplementedRBACServer) ListPermissions(context.Context, *ListPermissionRequest) (*ListPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedRBACServer) CheckRolePermission(context.Context, *CheckRolePermissionRequest) (*CheckRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRolePermission not implemented")
}
func (UnimplementedRBACServer) TMAddPolicy(context.Context, *TMPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TMAddPolicy not implemented")
}
func (UnimplementedRBACServer) TMDeletePolicy(context.Context, *TMPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TMDeletePolicy not implemented")
}
func (UnimplementedRBACServer) TMAddRoleBinding(context.Context, *TMRoleBindingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TMAddRoleBinding not implemented")
}
func (UnimplementedRBACServer) TMDeleteRoleBinding(context.Context, *TMRoleBindingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TMDeleteRoleBinding not implemented")
}
func (UnimplementedRBACServer) mustEmbedUnimplementedRBACServer() {}

// UnsafeRBACServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RBACServer will
// result in compilation errors.
type UnsafeRBACServer interface {
	mustEmbedUnimplementedRBACServer()
}

func RegisterRBACServer(s grpc.ServiceRegistrar, srv RBACServer) {
	s.RegisterService(&RBAC_ServiceDesc, srv)
}

func _RBAC_CreateRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).CreateRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.rbac.v1.RBAC/CreateRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).CreateRoles(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_ListRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).ListRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.rbac.v1.RBAC/ListRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).ListRole(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.rbac.v1.RBAC/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.rbac.v1.RBAC/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.rbac.v1.RBAC/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_UpdateUserRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRoleBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).UpdateUserRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.rbac.v1.RBAC/UpdateUserRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).UpdateUserRoleBinding(ctx, req.(*UpdateUserRoleBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_CreateRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).CreateRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.rbac.v1.RBAC/CreateRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).CreateRoleBinding(ctx, req.(*CreateRoleBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_DeleteRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).DeleteRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.rbac.v1.RBAC/DeleteRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).DeleteRoleBinding(ctx, req.(*DeleteRoleBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.rbac.v1.RBAC/ListPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).ListPermissions(ctx, req.(*ListPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_CheckRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).CheckRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.rbac.v1.RBAC/CheckRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).CheckRolePermission(ctx, req.(*CheckRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_TMAddPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).TMAddPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.rbac.v1.RBAC/TMAddPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).TMAddPolicy(ctx, req.(*TMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_TMDeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).TMDeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.rbac.v1.RBAC/TMDeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).TMDeletePolicy(ctx, req.(*TMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_TMAddRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TMRoleBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).TMAddRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.rbac.v1.RBAC/TMAddRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).TMAddRoleBinding(ctx, req.(*TMRoleBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_TMDeleteRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TMRoleBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).TMDeleteRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.tkeel.rudder.api.rbac.v1.RBAC/TMDeleteRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).TMDeleteRoleBinding(ctx, req.(*TMRoleBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RBAC_ServiceDesc is the grpc.ServiceDesc for RBAC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RBAC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.tkeel.rudder.api.rbac.v1.RBAC",
	HandlerType: (*RBACServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoles",
			Handler:    _RBAC_CreateRoles_Handler,
		},
		{
			MethodName: "ListRole",
			Handler:    _RBAC_ListRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _RBAC_GetRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RBAC_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RBAC_UpdateRole_Handler,
		},
		{
			MethodName: "UpdateUserRoleBinding",
			Handler:    _RBAC_UpdateUserRoleBinding_Handler,
		},
		{
			MethodName: "CreateRoleBinding",
			Handler:    _RBAC_CreateRoleBinding_Handler,
		},
		{
			MethodName: "DeleteRoleBinding",
			Handler:    _RBAC_DeleteRoleBinding_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _RBAC_ListPermissions_Handler,
		},
		{
			MethodName: "CheckRolePermission",
			Handler:    _RBAC_CheckRolePermission_Handler,
		},
		{
			MethodName: "TMAddPolicy",
			Handler:    _RBAC_TMAddPolicy_Handler,
		},
		{
			MethodName: "TMDeletePolicy",
			Handler:    _RBAC_TMDeletePolicy_Handler,
		},
		{
			MethodName: "TMAddRoleBinding",
			Handler:    _RBAC_TMAddRoleBinding_Handler,
		},
		{
			MethodName: "TMDeleteRoleBinding",
			Handler:    _RBAC_TMDeleteRoleBinding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rbac/v1/rbac.proto",
}
