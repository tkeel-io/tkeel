//
//Copyright 2021 The tKeel Authors.
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: api/repo/v1/repo.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InstallerState int32

const (
	InstallerState_UNINSTALL InstallerState = 0
	InstallerState_INSTALLED InstallerState = 1
	InstallerState_SAME_NAME InstallerState = 2
)

// Enum value maps for InstallerState.
var (
	InstallerState_name = map[int32]string{
		0: "UNINSTALL",
		1: "INSTALLED",
		2: "SAME_NAME",
	}
	InstallerState_value = map[string]int32{
		"UNINSTALL": 0,
		"INSTALLED": 1,
		"SAME_NAME": 2,
	}
)

func (x InstallerState) Enum() *InstallerState {
	p := new(InstallerState)
	*p = x
	return p
}

func (x InstallerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstallerState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_repo_v1_repo_proto_enumTypes[0].Descriptor()
}

func (InstallerState) Type() protoreflect.EnumType {
	return &file_api_repo_v1_repo_proto_enumTypes[0]
}

func (x InstallerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstallerState.Descriptor instead.
func (InstallerState) EnumDescriptor() ([]byte, []int) {
	return file_api_repo_v1_repo_proto_rawDescGZIP(), []int{0}
}

type RepoObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url          string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Metadata     map[string][]byte `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations  map[string]string `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InstallerNum int32             `protobuf:"varint,5,opt,name=installer_num,json=installerNum,proto3" json:"installer_num,omitempty"`
}

func (x *RepoObject) Reset() {
	*x = RepoObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repo_v1_repo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoObject) ProtoMessage() {}

func (x *RepoObject) ProtoReflect() protoreflect.Message {
	mi := &file_api_repo_v1_repo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoObject.ProtoReflect.Descriptor instead.
func (*RepoObject) Descriptor() ([]byte, []int) {
	return file_api_repo_v1_repo_proto_rawDescGZIP(), []int{0}
}

func (x *RepoObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepoObject) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RepoObject) GetMetadata() map[string][]byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RepoObject) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *RepoObject) GetInstallerNum() int32 {
	if x != nil {
		return x.InstallerNum
	}
	return 0
}

type InstallerObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version     string                       `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Repo        string                       `protobuf:"bytes,3,opt,name=repo,proto3" json:"repo,omitempty"`
	Metadata    map[string][]byte            `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations map[string]string            `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Maintainers []*InstallerObjectMaintainer `protobuf:"bytes,6,rep,name=maintainers,proto3" json:"maintainers,omitempty"`
	State       InstallerState               `protobuf:"varint,7,opt,name=state,proto3,enum=io.tkeel.plugin.api.repo.v1.InstallerState" json:"state,omitempty"`
	Desc        string                       `protobuf:"bytes,8,opt,name=desc,proto3" json:"desc,omitempty"`
	Timestamp   uint64                       `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Icon        string                       `protobuf:"bytes,10,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *InstallerObject) Reset() {
	*x = InstallerObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repo_v1_repo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallerObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallerObject) ProtoMessage() {}

func (x *InstallerObject) ProtoReflect() protoreflect.Message {
	mi := &file_api_repo_v1_repo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallerObject.ProtoReflect.Descriptor instead.
func (*InstallerObject) Descriptor() ([]byte, []int) {
	return file_api_repo_v1_repo_proto_rawDescGZIP(), []int{1}
}

func (x *InstallerObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstallerObject) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstallerObject) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *InstallerObject) GetMetadata() map[string][]byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstallerObject) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *InstallerObject) GetMaintainers() []*InstallerObjectMaintainer {
	if x != nil {
		return x.Maintainers
	}
	return nil
}

func (x *InstallerObject) GetState() InstallerState {
	if x != nil {
		return x.State
	}
	return InstallerState_UNINSTALL
}

func (x *InstallerObject) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *InstallerObject) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *InstallerObject) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type CreateRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url  *CreateRepoRequest_RepoUrl `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CreateRepoRequest) Reset() {
	*x = CreateRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repo_v1_repo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRepoRequest) ProtoMessage() {}

func (x *CreateRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_repo_v1_repo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRepoRequest.ProtoReflect.Descriptor instead.
func (*CreateRepoRequest) Descriptor() ([]byte, []int) {
	return file_api_repo_v1_repo_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRepoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRepoRequest) GetUrl() *CreateRepoRequest_RepoUrl {
	if x != nil {
		return x.Url
	}
	return nil
}

type CreateRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo *RepoObject `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *CreateRepoResponse) Reset() {
	*x = CreateRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repo_v1_repo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRepoResponse) ProtoMessage() {}

func (x *CreateRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_repo_v1_repo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRepoResponse.ProtoReflect.Descriptor instead.
func (*CreateRepoResponse) Descriptor() ([]byte, []int) {
	return file_api_repo_v1_repo_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRepoResponse) GetRepo() *RepoObject {
	if x != nil {
		return x.Repo
	}
	return nil
}

type DeleteRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteRepoRequest) Reset() {
	*x = DeleteRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repo_v1_repo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRepoRequest) ProtoMessage() {}

func (x *DeleteRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_repo_v1_repo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRepoRequest.ProtoReflect.Descriptor instead.
func (*DeleteRepoRequest) Descriptor() ([]byte, []int) {
	return file_api_repo_v1_repo_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteRepoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo *RepoObject `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *DeleteRepoResponse) Reset() {
	*x = DeleteRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repo_v1_repo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRepoResponse) ProtoMessage() {}

func (x *DeleteRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_repo_v1_repo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRepoResponse.ProtoReflect.Descriptor instead.
func (*DeleteRepoResponse) Descriptor() ([]byte, []int) {
	return file_api_repo_v1_repo_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteRepoResponse) GetRepo() *RepoObject {
	if x != nil {
		return x.Repo
	}
	return nil
}

type ListRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repos []*RepoObject `protobuf:"bytes,1,rep,name=repos,proto3" json:"repos,omitempty"`
}

func (x *ListRepoResponse) Reset() {
	*x = ListRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repo_v1_repo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepoResponse) ProtoMessage() {}

func (x *ListRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_repo_v1_repo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepoResponse.ProtoReflect.Descriptor instead.
func (*ListRepoResponse) Descriptor() ([]byte, []int) {
	return file_api_repo_v1_repo_proto_rawDescGZIP(), []int{6}
}

func (x *ListRepoResponse) GetRepos() []*RepoObject {
	if x != nil {
		return x.Repos
	}
	return nil
}

type ListAllRepoInstallerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      int32  `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderBy      string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	IsDescending bool   `protobuf:"varint,4,opt,name=is_descending,json=isDescending,proto3" json:"is_descending,omitempty"`
	KeyWords     string `protobuf:"bytes,5,opt,name=key_words,json=keyWords,proto3" json:"key_words,omitempty"`
	Installed    bool   `protobuf:"varint,10,opt,name=installed,proto3" json:"installed,omitempty"`
}

func (x *ListAllRepoInstallerRequest) Reset() {
	*x = ListAllRepoInstallerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repo_v1_repo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllRepoInstallerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllRepoInstallerRequest) ProtoMessage() {}

func (x *ListAllRepoInstallerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_repo_v1_repo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllRepoInstallerRequest.ProtoReflect.Descriptor instead.
func (*ListAllRepoInstallerRequest) Descriptor() ([]byte, []int) {
	return file_api_repo_v1_repo_proto_rawDescGZIP(), []int{7}
}

func (x *ListAllRepoInstallerRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListAllRepoInstallerRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAllRepoInstallerRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListAllRepoInstallerRequest) GetIsDescending() bool {
	if x != nil {
		return x.IsDescending
	}
	return false
}

func (x *ListAllRepoInstallerRequest) GetKeyWords() string {
	if x != nil {
		return x.KeyWords
	}
	return ""
}

func (x *ListAllRepoInstallerRequest) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

type ListAllRepoInstallerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total           int32              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	PageNum         int32              `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize        int32              `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	BriefInstallers []*InstallerObject `protobuf:"bytes,10,rep,name=brief_installers,json=briefInstallers,proto3" json:"brief_installers,omitempty"`
	InstalledNum    int32              `protobuf:"varint,11,opt,name=installed_num,json=installedNum,proto3" json:"installed_num,omitempty"`
}

func (x *ListAllRepoInstallerResponse) Reset() {
	*x = ListAllRepoInstallerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repo_v1_repo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllRepoInstallerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllRepoInstallerResponse) ProtoMessage() {}

func (x *ListAllRepoInstallerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_repo_v1_repo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllRepoInstallerResponse.ProtoReflect.Descriptor instead.
func (*ListAllRepoInstallerResponse) Descriptor() ([]byte, []int) {
	return file_api_repo_v1_repo_proto_rawDescGZIP(), []int{8}
}

func (x *ListAllRepoInstallerResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListAllRepoInstallerResponse) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListAllRepoInstallerResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAllRepoInstallerResponse) GetBriefInstallers() []*InstallerObject {
	if x != nil {
		return x.BriefInstallers
	}
	return nil
}

func (x *ListAllRepoInstallerResponse) GetInstalledNum() int32 {
	if x != nil {
		return x.InstalledNum
	}
	return 0
}

type ListRepoInstallerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      int32  `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderBy      string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	IsDescending bool   `protobuf:"varint,4,opt,name=is_descending,json=isDescending,proto3" json:"is_descending,omitempty"`
	KeyWords     string `protobuf:"bytes,5,opt,name=key_words,json=keyWords,proto3" json:"key_words,omitempty"`
	Repo         string `protobuf:"bytes,10,opt,name=repo,proto3" json:"repo,omitempty"`
	Installed    bool   `protobuf:"varint,11,opt,name=installed,proto3" json:"installed,omitempty"`
}

func (x *ListRepoInstallerRequest) Reset() {
	*x = ListRepoInstallerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repo_v1_repo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepoInstallerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepoInstallerRequest) ProtoMessage() {}

func (x *ListRepoInstallerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_repo_v1_repo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepoInstallerRequest.ProtoReflect.Descriptor instead.
func (*ListRepoInstallerRequest) Descriptor() ([]byte, []int) {
	return file_api_repo_v1_repo_proto_rawDescGZIP(), []int{9}
}

func (x *ListRepoInstallerRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListRepoInstallerRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRepoInstallerRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListRepoInstallerRequest) GetIsDescending() bool {
	if x != nil {
		return x.IsDescending
	}
	return false
}

func (x *ListRepoInstallerRequest) GetKeyWords() string {
	if x != nil {
		return x.KeyWords
	}
	return ""
}

func (x *ListRepoInstallerRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *ListRepoInstallerRequest) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

type ListRepoInstallerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total           int32              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	PageNum         int32              `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize        int32              `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	BriefInstallers []*InstallerObject `protobuf:"bytes,10,rep,name=brief_installers,json=briefInstallers,proto3" json:"brief_installers,omitempty"`
	InstalledNum    int32              `protobuf:"varint,11,opt,name=installed_num,json=installedNum,proto3" json:"installed_num,omitempty"`
}

func (x *ListRepoInstallerResponse) Reset() {
	*x = ListRepoInstallerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repo_v1_repo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepoInstallerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepoInstallerResponse) ProtoMessage() {}

func (x *ListRepoInstallerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_repo_v1_repo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepoInstallerResponse.ProtoReflect.Descriptor instead.
func (*ListRepoInstallerResponse) Descriptor() ([]byte, []int) {
	return file_api_repo_v1_repo_proto_rawDescGZIP(), []int{10}
}

func (x *ListRepoInstallerResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListRepoInstallerResponse) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListRepoInstallerResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRepoInstallerResponse) GetBriefInstallers() []*InstallerObject {
	if x != nil {
		return x.BriefInstallers
	}
	return nil
}

func (x *ListRepoInstallerResponse) GetInstalledNum() int32 {
	if x != nil {
		return x.InstalledNum
	}
	return 0
}

type GetRepoInstallerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo             string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	InstallerName    string `protobuf:"bytes,2,opt,name=installer_name,json=installerName,proto3" json:"installer_name,omitempty"`
	InstallerVersion string `protobuf:"bytes,3,opt,name=installer_version,json=installerVersion,proto3" json:"installer_version,omitempty"`
}

func (x *GetRepoInstallerRequest) Reset() {
	*x = GetRepoInstallerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repo_v1_repo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepoInstallerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepoInstallerRequest) ProtoMessage() {}

func (x *GetRepoInstallerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_repo_v1_repo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepoInstallerRequest.ProtoReflect.Descriptor instead.
func (*GetRepoInstallerRequest) Descriptor() ([]byte, []int) {
	return file_api_repo_v1_repo_proto_rawDescGZIP(), []int{11}
}

func (x *GetRepoInstallerRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *GetRepoInstallerRequest) GetInstallerName() string {
	if x != nil {
		return x.InstallerName
	}
	return ""
}

func (x *GetRepoInstallerRequest) GetInstallerVersion() string {
	if x != nil {
		return x.InstallerVersion
	}
	return ""
}

type GetRepoInstallerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Installer *InstallerObject `protobuf:"bytes,1,opt,name=installer,proto3" json:"installer,omitempty"`
}

func (x *GetRepoInstallerResponse) Reset() {
	*x = GetRepoInstallerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repo_v1_repo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepoInstallerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepoInstallerResponse) ProtoMessage() {}

func (x *GetRepoInstallerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_repo_v1_repo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepoInstallerResponse.ProtoReflect.Descriptor instead.
func (*GetRepoInstallerResponse) Descriptor() ([]byte, []int) {
	return file_api_repo_v1_repo_proto_rawDescGZIP(), []int{12}
}

func (x *GetRepoInstallerResponse) GetInstaller() *InstallerObject {
	if x != nil {
		return x.Installer
	}
	return nil
}

type InstallerObjectMaintainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Url   string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *InstallerObjectMaintainer) Reset() {
	*x = InstallerObjectMaintainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repo_v1_repo_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallerObjectMaintainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallerObjectMaintainer) ProtoMessage() {}

func (x *InstallerObjectMaintainer) ProtoReflect() protoreflect.Message {
	mi := &file_api_repo_v1_repo_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallerObjectMaintainer.ProtoReflect.Descriptor instead.
func (*InstallerObjectMaintainer) Descriptor() ([]byte, []int) {
	return file_api_repo_v1_repo_proto_rawDescGZIP(), []int{1, 2}
}

func (x *InstallerObjectMaintainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstallerObjectMaintainer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *InstallerObjectMaintainer) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type CreateRepoRequest_RepoUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CreateRepoRequest_RepoUrl) Reset() {
	*x = CreateRepoRequest_RepoUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repo_v1_repo_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRepoRequest_RepoUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRepoRequest_RepoUrl) ProtoMessage() {}

func (x *CreateRepoRequest_RepoUrl) ProtoReflect() protoreflect.Message {
	mi := &file_api_repo_v1_repo_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRepoRequest_RepoUrl.ProtoReflect.Descriptor instead.
func (*CreateRepoRequest_RepoUrl) Descriptor() ([]byte, []int) {
	return file_api_repo_v1_repo_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CreateRepoRequest_RepoUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

var File_api_repo_v1_repo_proto protoreflect.FileDescriptor

var file_api_repo_v1_repo_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65,
	0x65, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe6, 0x03, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92,
	0x41, 0x0b, 0x32, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x20, 0x75, 0x72, 0x6c, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x6a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65,
	0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x32, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x71, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32,
	0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6e, 0x75, 0x6d, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x07, 0x0a, 0x0f, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10,
	0x32, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x52, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x12, 0x6f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x78, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65,
	0x65, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x0b,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32,
	0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32,
	0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x64, 0x65, 0x73, 0x63, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x3e, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0x6c,
	0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x20, 0x69, 0x63, 0x6f, 0x6e, 0x20, 0x75, 0x72, 0x6c, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x8a, 0x01, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41,
	0x11, 0x32, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x20, 0x75, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xbc, 0x01, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x42, 0x0d, 0x92, 0x41, 0x0a,
	0x32, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x20, 0x75, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a,
	0x2a, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x20, 0x75, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x5c, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x09, 0x92, 0x41, 0x06, 0x32, 0x04, 0x72,
	0x65, 0x70, 0x6f, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x37, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41,
	0x0b, 0x32, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65,
	0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x09, 0x92, 0x41, 0x06, 0x32, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x22, 0x61, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x0e, 0x92, 0x41,
	0x0b, 0x32, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x22, 0xec, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x70, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x32, 0x1a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x43, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1e, 0x92, 0x41,
	0x1b, 0x32, 0x19, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x69,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x20, 0x73, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x69, 0x73,
	0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x09, 0x6b, 0x65,
	0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92,
	0x41, 0x11, 0x32, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20,
	0x6b, 0x65, 0x79, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x22, 0x86, 0x03, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0x92,
	0x41, 0x13, 0x32, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x31,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x70, 0x61,
	0x67, 0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x62, 0x72, 0x69, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69,
	0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32,
	0x33, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2c, 0x6f, 0x6e, 0x6c, 0x79, 0x20,
	0x68, 0x61, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x32, 0x1a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x22, 0x8d, 0x03, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32,
	0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x32, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20,
	0x73, 0x69, 0x7a, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x43, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x20, 0x73, 0x6f, 0x72,
	0x74, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x31, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x20, 0x6b, 0x65, 0x79, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x22, 0x83, 0x03, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20,
	0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x62, 0x72, 0x69, 0x65,
	0x66, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x33, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x2c, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x62, 0x72, 0x69, 0x65,
	0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4e, 0x75,
	0x6d, 0x22, 0xbe, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b,
	0x32, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x12, 0x3a, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a,
	0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2a, 0x3d, 0x0a, 0x0e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x4e, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41,
	0x4d, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x32, 0xe2, 0x0d, 0x0a, 0x04, 0x52, 0x65,
	0x70, 0x6f, 0x12, 0xf7, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x12, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa0, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x22, 0x0d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x3a, 0x03, 0x75, 0x72, 0x6c, 0x92, 0x41, 0x82, 0x01, 0x0a, 0x04, 0x52, 0x65, 0x70, 0x6f,
	0x12, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0x2a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x4a, 0x0d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x06, 0x0a, 0x04, 0x53, 0x55, 0x43, 0x43, 0x4a,
	0x19, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x12, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x4a, 0x17, 0x0a, 0x03, 0x34, 0x30,
	0x39, 0x12, 0x10, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x4a, 0x17, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x10, 0x0a, 0x0e, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x12, 0x8b, 0x02, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x2e, 0x2e, 0x69, 0x6f,
	0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6f,
	0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x82, 0x01, 0x0a, 0x04, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x12,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe6, 0x8e, 0xa5, 0xe5,
	0x8f, 0xa3, 0x2a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x4a, 0x0d,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x06, 0x0a, 0x04, 0x53, 0x55, 0x43, 0x43, 0x4a, 0x19, 0x0a,
	0x03, 0x34, 0x30, 0x30, 0x12, 0x12, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x4a, 0x17, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12,
	0x10, 0x0a, 0x0e, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x4a, 0x17, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x10, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x12, 0xd1, 0x01, 0x0a, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x92, 0x41,
	0x6d, 0x0a, 0x04, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4,
	0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f,
	0xa3, 0x2a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x4a, 0x0d, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x06, 0x0a, 0x04, 0x53, 0x55, 0x43, 0x43, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x12, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x4a, 0x17, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x10, 0x0a, 0x0e,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x12, 0xb6,
	0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65,
	0x65, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70,
	0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x92, 0x41, 0x8b, 0x01, 0x0a, 0x04, 0x52, 0x65,
	0x70, 0x6f, 0x12, 0x2a, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89,
	0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe7, 0x9a, 0x84, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe5,
	0x8c, 0x85, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x2a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x4a, 0x0d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x06, 0x0a, 0x04, 0x53,
	0x55, 0x43, 0x43, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x12, 0x0a, 0x10, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x4a, 0x17,
	0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x10, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x12, 0xc4, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x35, 0x2e,
	0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x72,
	0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x92,
	0x41, 0x9b, 0x01, 0x0a, 0x04, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x24, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe4, 0xb8, 0xad, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85,
	0xe5, 0x8c, 0x85, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x2a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x4a, 0x0d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x06, 0x0a, 0x04, 0x53, 0x55, 0x43,
	0x43, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x12, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x4a, 0x17, 0x0a, 0x03,
	0x34, 0x30, 0x34, 0x12, 0x10, 0x0a, 0x0e, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x4a, 0x17, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x10, 0x0a, 0x0e,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x12, 0xfd,
	0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x74,
	0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xfb, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x92, 0x41, 0xb2, 0x01, 0x0a, 0x04, 0x52, 0x65,
	0x70, 0x6f, 0x12, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93,
	0xe4, 0xb8, 0xad, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe5,
	0x8c, 0x85, 0x2a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x4a, 0x0d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x06, 0x0a, 0x04, 0x53,
	0x55, 0x43, 0x43, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x12, 0x0a, 0x10, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x4a, 0x17,
	0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x10, 0x0a, 0x0e, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x4a, 0x1c, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x15,
	0x0a, 0x13, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x4a, 0x17, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x10, 0x0a, 0x0e,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x42, 0x49,
	0x0a, 0x1b, 0x69, 0x6f, 0x2e, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a,
	0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x6b, 0x65, 0x65,
	0x6c, 0x2d, 0x69, 0x6f, 0x2f, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_repo_v1_repo_proto_rawDescOnce sync.Once
	file_api_repo_v1_repo_proto_rawDescData = file_api_repo_v1_repo_proto_rawDesc
)

func file_api_repo_v1_repo_proto_rawDescGZIP() []byte {
	file_api_repo_v1_repo_proto_rawDescOnce.Do(func() {
		file_api_repo_v1_repo_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_repo_v1_repo_proto_rawDescData)
	})
	return file_api_repo_v1_repo_proto_rawDescData
}

var file_api_repo_v1_repo_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_repo_v1_repo_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_api_repo_v1_repo_proto_goTypes = []interface{}{
	(InstallerState)(0),                  // 0: io.tkeel.plugin.api.repo.v1.InstallerState
	(*RepoObject)(nil),                   // 1: io.tkeel.plugin.api.repo.v1.RepoObject
	(*InstallerObject)(nil),              // 2: io.tkeel.plugin.api.repo.v1.InstallerObject
	(*CreateRepoRequest)(nil),            // 3: io.tkeel.plugin.api.repo.v1.CreateRepoRequest
	(*CreateRepoResponse)(nil),           // 4: io.tkeel.plugin.api.repo.v1.CreateRepoResponse
	(*DeleteRepoRequest)(nil),            // 5: io.tkeel.plugin.api.repo.v1.DeleteRepoRequest
	(*DeleteRepoResponse)(nil),           // 6: io.tkeel.plugin.api.repo.v1.DeleteRepoResponse
	(*ListRepoResponse)(nil),             // 7: io.tkeel.plugin.api.repo.v1.ListRepoResponse
	(*ListAllRepoInstallerRequest)(nil),  // 8: io.tkeel.plugin.api.repo.v1.ListAllRepoInstallerRequest
	(*ListAllRepoInstallerResponse)(nil), // 9: io.tkeel.plugin.api.repo.v1.ListAllRepoInstallerResponse
	(*ListRepoInstallerRequest)(nil),     // 10: io.tkeel.plugin.api.repo.v1.ListRepoInstallerRequest
	(*ListRepoInstallerResponse)(nil),    // 11: io.tkeel.plugin.api.repo.v1.ListRepoInstallerResponse
	(*GetRepoInstallerRequest)(nil),      // 12: io.tkeel.plugin.api.repo.v1.GetRepoInstallerRequest
	(*GetRepoInstallerResponse)(nil),     // 13: io.tkeel.plugin.api.repo.v1.GetRepoInstallerResponse
	nil,                                  // 14: io.tkeel.plugin.api.repo.v1.RepoObject.MetadataEntry
	nil,                                  // 15: io.tkeel.plugin.api.repo.v1.RepoObject.AnnotationsEntry
	nil,                                  // 16: io.tkeel.plugin.api.repo.v1.InstallerObject.MetadataEntry
	nil,                                  // 17: io.tkeel.plugin.api.repo.v1.InstallerObject.AnnotationsEntry
	(*InstallerObjectMaintainer)(nil),    // 18: io.tkeel.plugin.api.repo.v1.InstallerObject.maintainer
	(*CreateRepoRequest_RepoUrl)(nil),    // 19: io.tkeel.plugin.api.repo.v1.CreateRepoRequest.RepoUrl
	(*emptypb.Empty)(nil),                // 20: google.protobuf.Empty
}
var file_api_repo_v1_repo_proto_depIdxs = []int32{
	14, // 0: io.tkeel.plugin.api.repo.v1.RepoObject.metadata:type_name -> io.tkeel.plugin.api.repo.v1.RepoObject.MetadataEntry
	15, // 1: io.tkeel.plugin.api.repo.v1.RepoObject.annotations:type_name -> io.tkeel.plugin.api.repo.v1.RepoObject.AnnotationsEntry
	16, // 2: io.tkeel.plugin.api.repo.v1.InstallerObject.metadata:type_name -> io.tkeel.plugin.api.repo.v1.InstallerObject.MetadataEntry
	17, // 3: io.tkeel.plugin.api.repo.v1.InstallerObject.annotations:type_name -> io.tkeel.plugin.api.repo.v1.InstallerObject.AnnotationsEntry
	18, // 4: io.tkeel.plugin.api.repo.v1.InstallerObject.maintainers:type_name -> io.tkeel.plugin.api.repo.v1.InstallerObject.maintainer
	0,  // 5: io.tkeel.plugin.api.repo.v1.InstallerObject.state:type_name -> io.tkeel.plugin.api.repo.v1.InstallerState
	19, // 6: io.tkeel.plugin.api.repo.v1.CreateRepoRequest.url:type_name -> io.tkeel.plugin.api.repo.v1.CreateRepoRequest.RepoUrl
	1,  // 7: io.tkeel.plugin.api.repo.v1.CreateRepoResponse.repo:type_name -> io.tkeel.plugin.api.repo.v1.RepoObject
	1,  // 8: io.tkeel.plugin.api.repo.v1.DeleteRepoResponse.repo:type_name -> io.tkeel.plugin.api.repo.v1.RepoObject
	1,  // 9: io.tkeel.plugin.api.repo.v1.ListRepoResponse.repos:type_name -> io.tkeel.plugin.api.repo.v1.RepoObject
	2,  // 10: io.tkeel.plugin.api.repo.v1.ListAllRepoInstallerResponse.brief_installers:type_name -> io.tkeel.plugin.api.repo.v1.InstallerObject
	2,  // 11: io.tkeel.plugin.api.repo.v1.ListRepoInstallerResponse.brief_installers:type_name -> io.tkeel.plugin.api.repo.v1.InstallerObject
	2,  // 12: io.tkeel.plugin.api.repo.v1.GetRepoInstallerResponse.installer:type_name -> io.tkeel.plugin.api.repo.v1.InstallerObject
	3,  // 13: io.tkeel.plugin.api.repo.v1.Repo.CreateRepo:input_type -> io.tkeel.plugin.api.repo.v1.CreateRepoRequest
	5,  // 14: io.tkeel.plugin.api.repo.v1.Repo.DeleteRepo:input_type -> io.tkeel.plugin.api.repo.v1.DeleteRepoRequest
	20, // 15: io.tkeel.plugin.api.repo.v1.Repo.ListRepo:input_type -> google.protobuf.Empty
	8,  // 16: io.tkeel.plugin.api.repo.v1.Repo.ListAllRepoInstaller:input_type -> io.tkeel.plugin.api.repo.v1.ListAllRepoInstallerRequest
	10, // 17: io.tkeel.plugin.api.repo.v1.Repo.ListRepoInstaller:input_type -> io.tkeel.plugin.api.repo.v1.ListRepoInstallerRequest
	12, // 18: io.tkeel.plugin.api.repo.v1.Repo.GetRepoInstaller:input_type -> io.tkeel.plugin.api.repo.v1.GetRepoInstallerRequest
	20, // 19: io.tkeel.plugin.api.repo.v1.Repo.CreateRepo:output_type -> google.protobuf.Empty
	6,  // 20: io.tkeel.plugin.api.repo.v1.Repo.DeleteRepo:output_type -> io.tkeel.plugin.api.repo.v1.DeleteRepoResponse
	7,  // 21: io.tkeel.plugin.api.repo.v1.Repo.ListRepo:output_type -> io.tkeel.plugin.api.repo.v1.ListRepoResponse
	9,  // 22: io.tkeel.plugin.api.repo.v1.Repo.ListAllRepoInstaller:output_type -> io.tkeel.plugin.api.repo.v1.ListAllRepoInstallerResponse
	11, // 23: io.tkeel.plugin.api.repo.v1.Repo.ListRepoInstaller:output_type -> io.tkeel.plugin.api.repo.v1.ListRepoInstallerResponse
	13, // 24: io.tkeel.plugin.api.repo.v1.Repo.GetRepoInstaller:output_type -> io.tkeel.plugin.api.repo.v1.GetRepoInstallerResponse
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_api_repo_v1_repo_proto_init() }
func file_api_repo_v1_repo_proto_init() {
	if File_api_repo_v1_repo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_repo_v1_repo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repo_v1_repo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallerObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repo_v1_repo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repo_v1_repo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repo_v1_repo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repo_v1_repo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repo_v1_repo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repo_v1_repo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllRepoInstallerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repo_v1_repo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllRepoInstallerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repo_v1_repo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepoInstallerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repo_v1_repo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepoInstallerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repo_v1_repo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepoInstallerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repo_v1_repo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepoInstallerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repo_v1_repo_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallerObjectMaintainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repo_v1_repo_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRepoRequest_RepoUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_repo_v1_repo_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_repo_v1_repo_proto_goTypes,
		DependencyIndexes: file_api_repo_v1_repo_proto_depIdxs,
		EnumInfos:         file_api_repo_v1_repo_proto_enumTypes,
		MessageInfos:      file_api_repo_v1_repo_proto_msgTypes,
	}.Build()
	File_api_repo_v1_repo_proto = out.File
	file_api_repo_v1_repo_proto_rawDesc = nil
	file_api_repo_v1_repo_proto_goTypes = nil
	file_api_repo_v1_repo_proto_depIdxs = nil
}
