{
  "swagger": "2.0",
  "info": {
    "title": "api/entry/v1/entry.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "entry"
    },
    {
      "name": "Oauth2"
    },
    {
      "name": "Plugin"
    },
    {
      "name": "Repo"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/entries": {
      "get": {
        "summary": "查询 console entries 接口",
        "operationId": "GetEntries",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GetEntriesResponse"
            }
          },
          "400": {
            "description": "INVAILD_TENANT",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_ERROR",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "entry"
        ]
      }
    },
    "/oauth2/admin": {
      "get": {
        "summary": "平台管理员 Token 颁发接口",
        "operationId": "IssueAdminToken",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1IssueTokenResponse"
            }
          },
          "400": {
            "description": "PASSWORD_NOT_MATCH",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_ERROR",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "password",
            "description": "admin password",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Oauth2"
        ]
      }
    },
    "/oauth2/plugin": {
      "post": {
        "summary": "插件 Token 颁发接口",
        "operationId": "IssuePluginToken",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1IssueTokenResponse"
            }
          },
          "400": {
            "description": "INVAILD_PLUGIN_ID",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_STORE",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1IssuePluginTokenRequest"
            }
          }
        ],
        "tags": [
          "Oauth2"
        ]
      }
    },
    "/oauth2/plugin/white-list": {
      "post": {
        "summary": "添加 Plugin 白名单 dapr App ID 接口",
        "operationId": "AddPluginWhiteList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "SUCC_AND_NO_CONTENT",
            "schema": {}
          },
          "409": {
            "description": "CLIENT_ID_ALREADY_EXISTS",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_STORE",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddPluginWhiteListRequest"
            }
          }
        ],
        "tags": [
          "Oauth2"
        ]
      }
    },
    "/plugins": {
      "get": {
        "summary": "获取插件列表接口",
        "operationId": "ListPlugin",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ListPluginResponse"
            }
          },
          "400": {
            "description": "INVALID_ARGUMENT",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_ERROR",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Plugin"
        ]
      }
    },
    "/plugins/{id}": {
      "get": {
        "summary": "查询插件接口",
        "operationId": "GetPlugin",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GetPluginResponse"
            }
          },
          "400": {
            "description": "INVALID_ARGUMENT",
            "schema": {}
          },
          "404": {
            "description": "PLUGIN_NOT_FOUND",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_ERROR",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "plugin id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Plugin"
        ]
      },
      "delete": {
        "summary": "卸载插件接口",
        "operationId": "UninstallPlugin",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UninstallPluginResponse"
            }
          },
          "400": {
            "description": "INVALID_ARGUMENT",
            "schema": {}
          },
          "404": {
            "description": "PLUGIN_NOT_FOUND",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_ERROR",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "plugin id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Plugin"
        ]
      },
      "post": {
        "summary": "安装插件接口",
        "operationId": "InstallPlugin",
        "responses": {
          "200": {
            "description": "SUCC",
            "schema": {
              "$ref": "#/definitions/v1InstallPluginResponse"
            }
          },
          "400": {
            "description": "INVALID_ARGUMENT",
            "schema": {}
          },
          "404": {
            "description": "REPOSITORY_OR_INSTALLER_NOT_FOUND",
            "schema": {}
          },
          "409": {
            "description": "ALREADY_EXISTS",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_STORE",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "install plugin id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "installer info",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Installer",
              "description": "installer info"
            }
          }
        ],
        "tags": [
          "Plugin"
        ]
      }
    },
    "/plugins/{id}/register": {
      "delete": {
        "summary": "注销插件接口",
        "operationId": "UnregisterPlugin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UnregisterPluginResponse"
            }
          },
          "204": {
            "description": "SUCC_AND_NO_CONTENT",
            "schema": {}
          },
          "400": {
            "description": "INVALID_ARGUMENT",
            "schema": {}
          },
          "404": {
            "description": "PLUGIN_NOT_FOUND",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_STORE",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "plugin id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Plugin"
        ]
      },
      "post": {
        "summary": "注册插件接口",
        "operationId": "RegisterPlugin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "SUCC_AND_NO_CONTENT",
            "schema": {}
          },
          "400": {
            "description": "INVALID_ARGUMENT",
            "schema": {}
          },
          "404": {
            "description": "PLUGIN_NOT_FOUND",
            "schema": {}
          },
          "409": {
            "description": "ALREADY_EXISTS",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_STORE",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "plugin id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "plugin register secret",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "description": "plugin register secret"
            }
          }
        ],
        "tags": [
          "Plugin"
        ]
      }
    },
    "/plugins/{id}/tenants": {
      "get": {
        "summary": "获取插件绑定租户接口",
        "operationId": "ListBindTenants",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ListBindTenantsResponse"
            }
          },
          "400": {
            "description": "INVALID_ARGUMENT",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_ERROR",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "plugin id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Plugin"
        ]
      },
      "delete": {
        "summary": "插件绑定租户接口",
        "operationId": "UnindTenants",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {}
            }
          },
          "400": {
            "description": "INVALID_ARGUMENT",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_ERROR",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "plugin id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "extra",
            "description": "extra data",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Plugin"
        ]
      },
      "post": {
        "summary": "插件绑定租户接口",
        "operationId": "BindTenants",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {}
            }
          },
          "400": {
            "description": "INVALID_ARGUMENT",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_ERROR",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "plugin id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "extra data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "byte",
              "description": "extra data"
            }
          }
        ],
        "tags": [
          "Plugin"
        ]
      }
    },
    "/repos": {
      "get": {
        "summary": "获取仓库列表接口",
        "operationId": "ListRepo",
        "responses": {
          "200": {
            "description": "SUCC",
            "schema": {
              "$ref": "#/definitions/v1ListRepoResponse"
            }
          },
          "400": {
            "description": "INVALID_ARGUMENT",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_STORE",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Repo"
        ]
      }
    },
    "/repos/{name}": {
      "delete": {
        "summary": "删除仓库接口",
        "operationId": "DeleteRepo",
        "responses": {
          "200": {
            "description": "SUCC",
            "schema": {
              "$ref": "#/definitions/v1DeleteRepoResponse"
            }
          },
          "400": {
            "description": "INVALID_ARGUMENT",
            "schema": {}
          },
          "404": {
            "description": "REPO_NOT_FOUND",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_STORE",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "repo name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Repo"
        ]
      },
      "post": {
        "summary": "创建仓库接口",
        "operationId": "CreateRepo",
        "responses": {
          "200": {
            "description": "SUCC",
            "schema": {
              "properties": {}
            }
          },
          "400": {
            "description": "INVALID_ARGUMENT",
            "schema": {}
          },
          "409": {
            "description": "ALREADY_EXISTS",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_STORE",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "repo name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "repo url",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "description": "repo url"
            }
          }
        ],
        "tags": [
          "Repo"
        ]
      }
    },
    "/repos/{repo}/installers": {
      "get": {
        "summary": "获取仓库中安装包列表接口",
        "operationId": "ListRepoInstaller",
        "responses": {
          "200": {
            "description": "SUCC",
            "schema": {
              "$ref": "#/definitions/v1ListRepoInstallerResponse"
            }
          },
          "400": {
            "description": "INVALID_ARGUMENT",
            "schema": {}
          },
          "404": {
            "description": "REPO_NOT_FOUND",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_STORE",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "repo name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Repo"
        ]
      }
    },
    "/repos/{repo}/installers/{installer_name}/{installer_version}": {
      "get": {
        "summary": "获取仓库中指定安装包",
        "operationId": "GetRepoInstaller",
        "responses": {
          "200": {
            "description": "SUCC",
            "schema": {
              "$ref": "#/definitions/v1GetRepoInstallerResponse"
            }
          },
          "400": {
            "description": "INVALID_ARGUMENT",
            "schema": {}
          },
          "404": {
            "description": "INSTALLER_NOT_FOUND",
            "schema": {}
          },
          "500": {
            "description": "INTERNAL_STORE",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "repo name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installer_name",
            "description": "installer name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installer_version",
            "description": "installer version",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Repo"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AddPluginWhiteListRequest": {
      "type": "object",
      "properties": {
        "plugin_id": {
          "type": "string",
          "description": "plugin id(dapr app id)"
        }
      }
    },
    "v1AddonsPoint": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        }
      },
      "description": "*\nmessage plugin declares extension point."
    },
    "v1BriefPluginInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "description": "*\nmessage brief plugin information."
    },
    "v1ConfigurationSchemaType": {
      "type": "string",
      "enum": [
        "JSON",
        "YAML"
      ],
      "default": "JSON"
    },
    "v1ConfigurationType": {
      "type": "string",
      "enum": [
        "JSON",
        "YAML"
      ],
      "default": "JSON"
    },
    "v1ConsoleEntry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "entry": {
          "type": "string"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ConsoleEntry"
          }
        }
      },
      "description": "plugin console entry."
    },
    "v1DeleteRepoResponse": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/v1RepoObject",
          "description": "repo"
        }
      }
    },
    "v1GetEntriesResponse": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ConsoleEntry"
          },
          "description": "tenant entries"
        }
      }
    },
    "v1GetPluginResponse": {
      "type": "object",
      "properties": {
        "plugin": {
          "$ref": "#/definitions/v1PluginObject",
          "description": "plugin object"
        }
      }
    },
    "v1GetRepoInstallerResponse": {
      "type": "object",
      "properties": {
        "installer": {
          "$ref": "#/definitions/v1InstallerObject",
          "description": "installer"
        }
      }
    },
    "v1ImplementedAddons": {
      "type": "object",
      "properties": {
        "addons_point": {
          "type": "string"
        },
        "implemented_endpoint": {
          "type": "string"
        }
      },
      "description": "*\nmessage plugin declares implemented other plugin extension point."
    },
    "v1ImplementedPlugin": {
      "type": "object",
      "properties": {
        "plugin": {
          "$ref": "#/definitions/v1BriefPluginInfo"
        },
        "addons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ImplementedAddons"
          }
        }
      },
      "description": "*\nmessage plugin implemented other plugin."
    },
    "v1InstallPluginResponse": {
      "type": "object",
      "properties": {
        "plugin": {
          "$ref": "#/definitions/v1PluginObject",
          "description": "plugin object"
        }
      }
    },
    "v1Installer": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "installer name"
        },
        "version": {
          "type": "string",
          "description": "installer version"
        },
        "repo": {
          "type": "string",
          "description": "repository name"
        },
        "configuration": {
          "type": "string",
          "format": "byte",
          "description": "installer configuration data"
        },
        "type": {
          "$ref": "#/definitions/v1ConfigurationType",
          "description": "configuration type"
        }
      },
      "description": "*\nInstaller."
    },
    "v1InstallerObject": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "installer name"
        },
        "version": {
          "type": "string",
          "description": "installer version"
        },
        "repo": {
          "type": "string",
          "description": "installer repo"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "repo annotations"
        },
        "readme": {
          "type": "string",
          "format": "byte",
          "description": "readme file"
        },
        "configuration_schema": {
          "type": "string",
          "format": "byte",
          "description": "configuration schema file"
        },
        "schema_type": {
          "$ref": "#/definitions/v1ConfigurationSchemaType",
          "description": "configuration schema type"
        },
        "configuration": {
          "type": "string",
          "format": "byte",
          "description": "configuration file"
        },
        "installed": {
          "type": "boolean",
          "description": "whether the installer has been installed"
        }
      }
    },
    "v1IssuePluginTokenRequest": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "description": "plugin id(dapr app id)"
        },
        "client_secret": {
          "type": "string",
          "description": "plugin secret"
        }
      }
    },
    "v1IssueTokenResponse": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "description": "oauth2 access token"
        },
        "token_type": {
          "type": "string",
          "description": "oauth2 token type"
        },
        "refresh_token": {
          "type": "string",
          "description": "oauth2 refresh token"
        },
        "expires_in": {
          "type": "integer",
          "format": "int32",
          "description": "oauth2 token expires"
        }
      }
    },
    "v1ListBindTenantsResponse": {
      "type": "object",
      "properties": {
        "tenants": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "plugin bind tenants list"
        }
      }
    },
    "v1ListPluginResponse": {
      "type": "object",
      "properties": {
        "plugin_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PluginObject"
          },
          "description": "plugin object list"
        }
      }
    },
    "v1ListRepoInstallerResponse": {
      "type": "object",
      "properties": {
        "brief_installers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InstallerObject"
          },
          "description": "brief installer info list,only has name and version"
        }
      }
    },
    "v1ListRepoResponse": {
      "type": "object",
      "properties": {
        "repos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1RepoObject"
          },
          "description": "repo list"
        }
      }
    },
    "v1PluginObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "plugin id"
        },
        "plugin_version": {
          "type": "string",
          "description": "plugin version"
        },
        "tkeel_version": {
          "type": "string",
          "description": "plugin depend tkeel version"
        },
        "addons_point": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AddonsPoint"
          },
          "description": "plugin declares addons"
        },
        "implemented_plugin": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ImplementedPlugin"
          },
          "description": "plugin implemented plugin list"
        },
        "secret": {
          "type": "string",
          "description": "plugin registered secret"
        },
        "register_timestamp": {
          "type": "string",
          "format": "int64",
          "description": "register timestamp"
        },
        "active_tenantes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "active tenant's id list"
        },
        "register_addons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1RegisterAddons"
          },
          "description": "register addons router"
        },
        "status": {
          "$ref": "#/definitions/v1PluginStatus",
          "description": "register plugin status"
        },
        "brief_installer_info": {
          "$ref": "#/definitions/v1Installer",
          "description": "brief installer info only has name,verison,repo_name and installed field."
        },
        "console_entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ConsoleEntry"
          },
          "description": "plugin console entries"
        }
      },
      "description": "*\nplugin object."
    },
    "v1PluginStatus": {
      "type": "string",
      "enum": [
        "ERROR",
        "UNREGISTER",
        "REGISTER",
        "RUNNING",
        "STOPPED"
      ],
      "default": "ERROR",
      "description": "*\nplugin state enum."
    },
    "v1RegisterAddons": {
      "type": "object",
      "properties": {
        "addons": {
          "type": "string",
          "description": "addons name"
        },
        "upstream": {
          "type": "string",
          "description": "upstream path"
        }
      },
      "description": "*\nRegister Addons."
    },
    "v1RepoObject": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "repo name"
        },
        "url": {
          "type": "string",
          "description": "repo url"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "repo annotations"
        }
      }
    },
    "v1UninstallPluginResponse": {
      "type": "object",
      "properties": {
        "plugin": {
          "$ref": "#/definitions/v1PluginObject",
          "description": "plugin object"
        }
      }
    },
    "v1UnregisterPluginResponse": {
      "type": "object",
      "properties": {
        "plugin": {
          "$ref": "#/definitions/v1PluginObject",
          "description": "plugin object"
        }
      }
    }
  }
}
