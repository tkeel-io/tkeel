/*
Copyright 2021 The tKeel Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package io.tkeel.security.api.oauth.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/tkeel-io/tkeel/api/security_oauth/v1;v1";
option java_multiple_files = true;
option java_package = "io.tkeel.security.api.oauth.v1";

service Oauth {

  rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse) {
    option (google.api.http) = {
      get : "/oauth/{tenant_id}/authorize"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "oauth authorize code with username and password"
      operation_id : "OauthAuthorize"
      tags : "[Security] OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }

  rpc Token(TokenRequest) returns (TokenResponse) {
    option (google.api.http) = {
      get : "/oauth/{tenant_id}/token"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "oauth token with code or password"
      operation_id : "OauthToken"
      tags : "[Security] OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }

  rpc Authenticate(google.protobuf.Empty) returns (AuthenticateResponse) {
    option (google.api.http) = {
      get : "/oauth/authenticate"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "oauth authenticate with header Authorization"
      operation_id : "OauthAuthenticate"
      tags : "[Security] OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {
    option (google.api.http) = {
      post : "/oauth/pwd"
      body : "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "oauth reset user password"
      operation_id : "ResetPassword"
      tags : "[Security] OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }

  rpc UpdatePassword(UpdatePasswordRequest)returns(UpdatePasswordResponse){
    option (google.api.http) = {
      put : "/oauth/pwd"
      body : "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "oauth update user password"
      operation_id : "UpdatePassword"
      tags : "[Security] OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }

  rpc OIDCRegister(OIDCRegisterRequest) returns (OIDCRegisterResponse) {
    option (google.api.http) = {
      post : "/oauth/oidc/register"
      body : "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "oauth OIDC provider register"
      operation_id : "OIDCRegister"
      tags : "[Security] OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }

  rpc TokenRevoke (TokenRevokeRequest) returns(TokenRevokeResponse){
    option (google.api.http) = {
      post : "/oauth/token/revoke"
      body : "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "oauth token revoke with refresh token"
      operation_id : "TokenRevoke"
      tags : "[Security] OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }
}

//
message AuthorizeRequest {
  string tenant_id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "tenantID path param"
    },
    (google.api.field_behavior) = REQUIRED
  ];
  string response_type = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "authorize response type, this must 'code',query param"
    },
    (google.api.field_behavior) = REQUIRED
  ];
  string username = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "username query param"
    },
    (google.api.field_behavior) = REQUIRED
  ];
  string password = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "password query param"
    },
    (google.api.field_behavior) = REQUIRED
  ];
  string redirect_uri = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "redirect uri with code"
    },
    (google.api.field_behavior) = REQUIRED
  ];
  string state = 6 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "state"
    },
    (google.api.field_behavior) = OPTIONAL
  ];
}

message AuthorizeResponse { string code = 1; }

message TokenRequest {
  string tenant_id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "tenant_id path param"
    },
    (google.api.field_behavior) = REQUIRED
  ];
  string grant_type = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "grant_type 'authorize_code','password', query param"
    },
    (google.api.field_behavior) = REQUIRED
  ];
  string code = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "code with authorize response,query param"
    },
    (google.api.field_behavior) = OPTIONAL
  ];
  string redirect_uri = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "redirect_uri while grant_type is code,query param"
    },
    (google.api.field_behavior) = OPTIONAL
  ];
  string username = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "username while grant_type is password ,query param"
    },
    (google.api.field_behavior) = OPTIONAL
  ];
  string password = 6 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "password while grant_type is password,query param"
    },
    (google.api.field_behavior) = OPTIONAL
  ];

  string refresh_token = 7 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "refresh token while grant_type is refresh_token,query "
                    "param"
    },
    (google.api.field_behavior) = OPTIONAL
  ];
}

message TokenResponse {
  string access_token = 1;
  string refresh_token = 2;
  int64 expires_in = 3;
  string token_type = 4;
  string redirect_url =5;
}

message AuthenticateResponse {
  int64 expires_in = 1;
  string user_id = 2;
  string username = 3;
  string external_id = 4;
  string nick_name = 5;
  string avatar = 6;
  string tenant_id = 7;
}

message ResetPasswordRequest {
  ResetPasswordBody body =1;
}

message ResetPasswordBody {
  string new_password =1;
  string reset_key =2;
}


message ResetPasswordResponse {
  string tenant_id =1;
  bool has_reset =2;
}

message OIDCRegisterRequest {
  OIDCRegisterBody body = 1;
}
message OIDCRegisterBody {
  string issuer =1;
  string client_id =2;
  string client_secret =3;
  string redirect_url =4;
  repeated string scopes =5;
  bool get_user_info =6;
  bool insecure_skip_verify =7;
  string email_key =8;
  string preferred_username_key =9;
  OIDCEndpoint endpoint =10;
  string tenant_id =11;
}
message OIDCEndpoint {
    string auth_url =1;
    string token_url=2;
    string user_info_url=3;
    string jwksurl =4;
    string end_session_url =5;
}

message OIDCRegisterResponse {
  bool ok =1;
}

message TokenRevokeRequest {
  TokenRevokeBody body =1;
}
message TokenRevokeBody {
  string refresh_token =1;
}

message TokenRevokeResponse {
  string tenant_id=1;
  bool revoked =2;
}

message UpdatePasswordRequest {
  UpdatePasswordBody body =1;
}

message UpdatePasswordBody {
 string new_password =1;
 string refresh_token =2;
}

message UpdatePasswordResponse {
  string tenant_id =1;
}